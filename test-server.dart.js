// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"":"Object;i,list",
 get$hasNext: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var value, t1;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  value = this.list[this.i];
  t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout: function(state0, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.StackTrace = {"":"Object;stack",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : "";
}
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
}
};

$$.Null = {"":"Object;"
};

$$.MetaInfo = {"":"Object;_tag>,_tags,_liblib$_set>",
 _liblib$_set$2: function(arg0, arg1) {
  return this._liblib$_set.call$2(arg0, arg1);
}
};

$$.JSSyntaxRegExp = {"":"Object;_liblib$_pattern,_multiLine,_ignoreCase",
 get$pattern: function() {
  return this._liblib$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
}
};

$$.NullThrownError = {"":"Object;",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"":"ArgumentError;message",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"":"Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_0 = $.StringBuffer_StringBuffer("");
  t1.i_1 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_1, t2.length); t1.i_1 = $.add(t1.i_1, 1)) {
    if ($.gtB(t1.i_1, 0)) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    t5 = t1.i_1;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_0;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_0 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_0;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_0 = $.StringBuffer_StringBuffer("");
      t1.i_1 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_1, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); t1.i_1 = $.add(t1.i_1, 1)) {
          if ($.gtB(t1.i_1, 0)) {
            t3 = t1.sb_0;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_0;
          $.getInterceptor$JSArray(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_1)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
      else {
        t3 = t1.sb_0;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        for (i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_0;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_0;
          $.getInterceptor$JSArray(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_0;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"":"Object;message>",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.StateError = {"":"Object;message",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {"":"Object;",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$.RuntimeError = {"":"Object;message",
 toString$0: function() {
  return "RuntimeError: " + this.message;
}
};

$$._ExceptionImplementation = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"":"Object;message",
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
},
 is$FormatException: true,
 is$Exception: true
};

$$.IllegalJSRegExpException = {"":"Object;_pattern,_errmsg",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"":"Object;",
 toString$0: function() {
  return "Exception: future has not been completed";
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"":"Object;",
 toString$0: function() {
  return "Exception: future already completed";
},
 is$Exception: true
};

$$.FutureUnhandledException = {"":"Object;source,stackTrace>",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = "FutureUnhandledException: exception while executing Future\n  " + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\n  ")) + "\n" + "original stack trace:\n  ";
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor$JSString(t3).replaceAll$2(t3, "\n", "\n  "));
},
 is$Exception: true
};

$$._FutureImpl = {"":"Object;_isComplete,_value,_exception,_stackTrace,_exceptionHandled,_throwOnException,_successListeners,_exceptionHandlers,_completionListeners",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    this._throwOnException = true;
    this._successListeners.push(onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.CONSTANT1.iterator$0(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.CONSTANT1.iterator$0(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._throwOnException)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.CONSTANT1.iterator$0(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"":"Object;_futureImpl",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception, null);
}
};

$$._HashMapImpl = {"":"Object;_keys>,_values,_loadLimit,_numberOfEntries,_numberOfDeleted",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(2, key, insertionIndex, hash, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      numberOfProbes0 = env3;
      hash = env2;
      insertionIndex = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      hash = $.and(t1, this._keys.length - 1);
      numberOfProbes = 1;
      insertionIndex = -1;
    case 2:
      var t1, key, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
              if (hash !== (hash | 0))
                throw $.iae(hash);
              if (hash < 0 || hash >= t1.length)
                throw $.ioore(hash);
              existingKey = t1[hash];
              if (existingKey == null) {
                if (insertionIndex < 0)
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
            case 2:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  hash = $.and($.getInterceptor(key).get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  if (typeof newNumberOfEntries !== 'number')
    throw $.iae(newNumberOfEntries);
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $.List_List(newCapacity);
  this._values = $.List_List(newCapacity);
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CONSTANT4)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t1 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = key;
    t1 = this._values;
    if (newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CONSTANT4)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = $.sub(this._numberOfEntries, 1);
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CONSTANT4;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CONSTANT4)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $.List_List(8);
  this._values = $.List_List(8);
},
 is$Map: true
};

$$._DeletedKeySentinel = {"":"Object;"
};

$$._KeyValuePair = {"":"Object;key>,value="
};

$$._LinkedHashMapImpl = {"":"Object;_list,_map",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    this._list.addLast$1($._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.index_0 = 0;
  this._list.forEach$1(new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.index_0 = 0;
  this._list.forEach$1(new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: true
};

$$.Object = {"":";",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"":"Object;_previous=,_next=,_element>",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"":"DoubleLinkedQueueEntry;_previous,_next,_element",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"":"Object;_sentinel",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$first: function() {
  return this._sentinel._next.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_0 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_0;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 some$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      return true;
  }
  return false;
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: true
};

$$._DoubleLinkedQueueIterator = {"":"Object;_sentinel,_currentEntry",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._HashSetImpl = {"":"Object;_backingMap",
 clear$0: function() {
  this._backingMap.clear$0();
},
 add$1: function(value) {
  this._backingMap.operator$indexSet$2(value, value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 forEach$1: function(f) {
  this._backingMap.forEach$1(new $._HashSetImpl_forEach_anon(f));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 some$1: function(f) {
  var keys = this._backingMap.get$keys();
  return $.getInterceptor$JSArray(keys).some$1(keys, f);
},
 get$isEmpty: function() {
  var t1 = this._backingMap;
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._backingMap;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 iterator$0: function() {
  return $._HashSetIterator$(this);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$();
},
 is$Collection: true
};

$$._HashSetIterator = {"":"Object;_entries,_nextValidIndex",
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = $.getInterceptor$JSStringJSArray(t2);
  if ($.geB(t1, t3.get$length(t2)))
    return false;
  if ($.index(t2, this._nextValidIndex) === $.CONSTANT4)
    this._advance$0();
  return $.lt(this._nextValidIndex, t3.get$length(t2));
},
 next$0: function() {
  var t1, t3, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior))
    return this.next$0$bailout2(1, t1);
  t3 = this._nextValidIndex;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  res = t1[t3];
  this._advance$0();
  return res;
},
 next$0$bailout2: function(state0, t1) {
  var res = $.index(t1, this._nextValidIndex);
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, length$, t2, entry;
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior))
    return this._advance$0$bailout(1, t1);
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CONSTANT4);
},
 _advance$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      length$ = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._entries;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 2:
      var t1, length$, t2, entry;
      state0 = 0;
      do {
        t2 = this._nextValidIndex + 1;
        this._nextValidIndex = t2;
        if ($.geB(t2, length$))
          break;
        entry = $.index(t1, this._nextValidIndex);
      } while (entry == null || entry === $.CONSTANT4);
  }
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$._StringBufferImpl = {"":"Object;_buffer,_length",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, str);
  this._length = $.add(this._length, $.getInterceptor$JSStringJSArray(str).get$length(str));
  return this;
},
 clear$0: function() {
  this._buffer = $.List_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {"":"Object;",
 toString$0: function(receiver) {
  return receiver.toString$0();
},
 charCodeAt$1: function(receiver, a0) {
  return receiver.charCodeAt$1(a0);
},
 substring$1: function(receiver, a0) {
  return receiver.substring$1(a0);
},
 get$length: function(receiver) {
  return receiver.get$length();
},
 add$1: function(receiver, a0) {
  return receiver.add$1(a0);
},
 replaceAll$2: function(receiver, a0, a1) {
  return receiver.replaceAll$2(a0, a1);
},
 ceil$0: function(receiver) {
  return receiver.ceil$0();
},
 endsWith$1: function(receiver, a0) {
  return receiver.endsWith$1(a0);
},
 substring$2: function(receiver, a0, a1) {
  return receiver.substring$2(a0, a1);
},
 setRange$3: function(receiver, a0, a1, a2) {
  return receiver.setRange$3(a0, a1, a2);
},
 get$first: function(receiver) {
  return receiver.get$first();
},
 forEach$1: function(receiver, a0) {
  return receiver.forEach$1(a0);
},
 removeRange$2: function(receiver, a0, a1) {
  return receiver.removeRange$2(a0, a1);
},
 get$isNaN: function(receiver) {
  return receiver.get$isNaN();
},
 iterator$0: function(receiver) {
  return receiver.iterator$0();
},
 addLast$1: function(receiver, a0) {
  return receiver.addLast$1(a0);
},
 reduce$2: function(receiver, a0, a1) {
  return receiver.reduce$2(a0, a1);
},
 setRange$4: function(receiver, a0, a1, a2, a3) {
  return receiver.setRange$4(a0, a1, a2, a3);
},
 get$isEmpty: function(receiver) {
  return receiver.get$isEmpty();
},
 set$length: function(receiver, value) {
  return receiver.set$length(value);
},
 indexOf$2: function(receiver, a0, a1) {
  return receiver.indexOf$2(a0, a1);
},
 get$charCodes: function(receiver) {
  return receiver.get$charCodes();
},
 toLowerCase$0: function(receiver) {
  return receiver.toLowerCase$0();
},
 get$hashCode: function(receiver) {
  return receiver.get$hashCode();
},
 indexOf$1: function(receiver, a0) {
  return receiver.indexOf$1(a0);
},
 getRange$2: function(receiver, a0, a1) {
  return receiver.getRange$2(a0, a1);
},
 clear$0: function(receiver) {
  return receiver.clear$0();
},
 some$1: function(receiver, a0) {
  return receiver.some$1(a0);
},
 truncate$0: function(receiver) {
  return receiver.truncate$0();
},
 get$isNegative: function(receiver) {
  return receiver.get$isNegative();
},
 floor$0: function(receiver) {
  return receiver.floor$0();
},
 removeLast$0: function(receiver) {
  return receiver.removeLast$0();
},
 toUpperCase$0: function(receiver) {
  return receiver.toUpperCase$0();
}
};

$$.JSFunction = {"":"Object;",
 toString$0: function(receiver) {
  return "Closure";
}
};

$$.JSBool = {"":"Object;",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 is$bool: true
};

$$.JSNull = {"":"Object;",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {"":"Object;",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 reduce$2: function(receiver, initialValue, combine) {
  return $.Collections_reduce(receiver, initialValue, combine);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if (end > receiver.length)
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 get$first: function(receiver) {
  if (0 >= receiver.length)
    throw $.ioore(0);
  return receiver[0];
},
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  $.checkGrowable(receiver, "removeRange");
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.CONSTANT1.set$length(receiver, t2);
},
 setRange$4: function(receiver, start, length$, from, startFrom) {
  var t1;
  $.checkMutable(receiver, "indexed set");
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  $.checkNull(from);
  $.checkNull(startFrom);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof startFrom === 'number' && Math.floor(startFrom) === startFrom))
    throw $.$$throw($.ArgumentError$(startFrom));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiver.length)
    throw $.$$throw($.RangeError$value(t1));
  $.Arrays_copy(from, startFrom, receiver, start, length$);
},
 setRange$3: function($receiver, start, length$, from) {
  return this.setRange$4($receiver, start, length$, from, 0);
},
 some$1: function(receiver, f) {
  return $.Collections_some(receiver, f);
},
 indexOf$2: function(receiver, element, start) {
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 indexOf$1: function($receiver, element) {
  return this.indexOf$2($receiver, element, 0);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 is$List: true,
 is$Collection: true
};

$$.JSNumber = {"":"Object;",
 get$isNegative: function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
},
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {"":"JSNumber;"
};

$$.JSDouble = {"":"JSNumber;"
};

$$.JSString = {"":"Object;",
 charCodeAt$1: function(receiver, index) {
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = other.length;
  t1 = receiver.length;
  if (otherLength > t1)
    return false;
  return other === this.substring$1(receiver, t1 - otherLength);
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($receiver, startIndex) {
  return this.substring$2($receiver, startIndex, null);
},
 toLowerCase$0: function(receiver) {
  return receiver.toLowerCase();
},
 toUpperCase$0: function(receiver) {
  return receiver.toUpperCase();
},
 get$charCodes: function(receiver) {
  var t1, result, i;
  t1 = receiver.length;
  result = $.List_List(t1);
  for (i = 0; i < t1; ++i)
    result[i] = receiver.charCodeAt(i);
  return result;
},
 indexOf$2: function(receiver, other, start) {
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 indexOf$1: function($receiver, other) {
  return this.indexOf$2($receiver, other, 0);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var hash, i, hash0, hash1;
  for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$._BufferList = {"":"Object;_liblib0$_length,_buffers,_index",
 add$2: function(buffer, offset) {
  var t1, t3;
  if (typeof offset !== 'number')
    return this.add$2$bailout(1, buffer, offset);
  t1 = this._buffers;
  $.getInterceptor$JSArray(t1).addLast$1(t1, buffer);
  t1 = this._liblib0$_length;
  if (typeof t1 !== 'number')
    return this.add$2$bailout(2, buffer, offset, t1);
  t3 = $.getInterceptor$JSStringJSArray(buffer).get$length(buffer);
  if (typeof t3 !== 'number')
    return this.add$2$bailout(3, offset, t3, t1);
  this._liblib0$_length = t1 + t3;
  if (!(offset === 0))
    this._index = offset;
},
 add$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      offset = env1;
      buffer = env0;
      break;
    case 2:
      t1 = env2;
      offset = env1;
      buffer = env0;
      break;
    case 3:
      t1 = env2;
      t3 = env1;
      offset = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._buffers;
      $.getInterceptor$JSArray(t1).addLast$1(t1, buffer);
      t1 = this._liblib0$_length;
    case 2:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(buffer).get$length(buffer);
    case 3:
      var offset, buffer, t1, t3;
      state0 = 0;
      this._liblib0$_length = $.add(t1, t3);
      if (!$.eqB(offset, 0))
        this._index = offset;
  }
},
 add$1: function(buffer) {
  return this.add$2(buffer, 0);
},
 get$first: function() {
  var t1 = this._buffers;
  return $.getInterceptor$JSArray(t1).get$first(t1);
},
 get$index: function() {
  return this._index;
},
 next$0: function() {
  var t1, t3, value, t2;
  t1 = this._buffers;
  t1 = $.getInterceptor$JSArray(t1).get$first(t1);
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior))
    return this.next$0$bailout0(1, t1);
  t3 = this._index;
  if (typeof t3 !== 'number')
    return this.next$0$bailout0(2, t3, t1);
  this._index = t3 + 1;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  value = t1[t3];
  t3 = this._liblib0$_length;
  if (typeof t3 !== 'number')
    return this.next$0$bailout0(3, value, t3);
  this._liblib0$_length = t3 - 1;
  t1 = this._index;
  t2 = this._buffers;
  t2 = $.getInterceptor$JSArray(t2).get$first(t2);
  if ($.eqB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2))) {
    this._buffers.removeFirst$0();
    this._index = 0;
  }
  return value;
},
 next$0$bailout0: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
    case 3:
      t3 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._buffers;
      t1 = $.getInterceptor$JSArray(t1).get$first(t1);
    case 1:
      state0 = 0;
      t3 = this._index;
    case 2:
      state0 = 0;
      this._index = $.add(t3, 1);
      value = $.index(t1, t3);
      t3 = this._liblib0$_length;
    case 3:
      var t1, t3, value, t2;
      state0 = 0;
      this._liblib0$_length = $.sub(t3, 1);
      t1 = this._index;
      t2 = this._buffers;
      t2 = $.getInterceptor$JSArray(t2).get$first(t2);
      if ($.eqB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2))) {
        this._buffers.removeFirst$0();
        this._index = 0;
      }
      return value;
  }
},
 readBytes$1: function(count) {
  var t1, t2, t3, result, remaining, bytesInFirst, t4;
  if (typeof count !== 'number')
    return this.readBytes$1$bailout(1, count);
  if ($.eqB(this._liblib0$_length, 0) || $.ltB(this._liblib0$_length, count))
    return;
  if ($.eqB(this._index, 0)) {
    t1 = this._buffers;
    t1 = $.getInterceptor$JSArray(t1).get$first(t1);
    t2 = $.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), count);
    t1 = t2;
  } else
    t1 = false;
  t2 = this._buffers;
  t3 = $.getInterceptor$JSArray(t2);
  if (t1) {
    result = t3.get$first(t2);
    this._buffers.removeFirst$0();
    this._index = 0;
    this._liblib0$_length = $.sub(this._liblib0$_length, count);
    return result;
  } else {
    t1 = t3.get$first(t2);
    if ($.geB($.sub($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._index), count)) {
      t1 = this._buffers;
      t1 = $.getInterceptor$JSArray(t1).get$first(t1);
      result = $.getInterceptor$JSArray(t1).getRange$2(t1, this._index, count);
      this._index = $.add(this._index, count);
      this._liblib0$_length = $.sub(this._liblib0$_length, count);
      t1 = this._index;
      t2 = this._buffers;
      t2 = $.getInterceptor$JSArray(t2).get$first(t2);
      if ($.eqB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2))) {
        this._buffers.removeFirst$0();
        this._index = 0;
      }
      return result;
    } else {
      result = $.Uint8List_Uint8List(count);
      for (t1 = $.getInterceptor$JSArray(result), remaining = count; remaining > 0;) {
        t2 = this._buffers;
        t2 = $.getInterceptor$JSArray(t2).get$first(t2);
        bytesInFirst = $.sub($.getInterceptor$JSStringJSArray(t2).get$length(t2), this._index);
        t2 = $.leB(bytesInFirst, remaining);
        t3 = this._buffers;
        t4 = count - remaining;
        if (t2) {
          t1.setRange$4(result, t4, bytesInFirst, $.getInterceptor$JSArray(t3).get$first(t3), this._index);
          this._buffers.removeFirst$0();
          this._index = 0;
          this._liblib0$_length = $.sub(this._liblib0$_length, bytesInFirst);
          if (typeof bytesInFirst !== 'number')
            throw $.iae(bytesInFirst);
          remaining -= bytesInFirst;
        } else {
          t1.setRange$4(result, t4, remaining, $.getInterceptor$JSArray(t3).get$first(t3), this._index);
          this._index = remaining;
          this._liblib0$_length = $.sub(this._liblib0$_length, remaining);
          remaining = 0;
        }
      }
      return result;
    }
  }
},
 readBytes$1$bailout: function(state0, count) {
  var t1, t2, result, remaining, bytesInFirst, t3;
  if ($.eqB(this._liblib0$_length, 0) || $.ltB(this._liblib0$_length, count))
    return;
  if ($.eqB(this._index, 0)) {
    t1 = this._buffers;
    t1 = $.getInterceptor$JSArray(t1).get$first(t1);
    t2 = $.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), count);
    t1 = t2;
  } else
    t1 = false;
  t2 = this._buffers;
  if (t1) {
    result = $.getInterceptor$JSArray(t2).get$first(t2);
    this._buffers.removeFirst$0();
    this._index = 0;
    this._liblib0$_length = $.sub(this._liblib0$_length, count);
    return result;
  } else {
    t1 = $.getInterceptor$JSArray(t2).get$first(t2);
    if ($.geB($.sub($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._index), count)) {
      t1 = this._buffers;
      t1 = $.getInterceptor$JSArray(t1).get$first(t1);
      result = $.getInterceptor$JSArray(t1).getRange$2(t1, this._index, count);
      this._index = $.add(this._index, count);
      this._liblib0$_length = $.sub(this._liblib0$_length, count);
      t1 = this._index;
      t2 = this._buffers;
      t2 = $.getInterceptor$JSArray(t2).get$first(t2);
      if ($.eqB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2))) {
        this._buffers.removeFirst$0();
        this._index = 0;
      }
      return result;
    } else {
      result = $.Uint8List_Uint8List(count);
      for (t1 = $.getInterceptor$JSArray(result), remaining = count; $.gtB(remaining, 0);) {
        t2 = this._buffers;
        t2 = $.getInterceptor$JSArray(t2).get$first(t2);
        bytesInFirst = $.sub($.getInterceptor$JSStringJSArray(t2).get$length(t2), this._index);
        if ($.leB(bytesInFirst, remaining)) {
          t2 = $.sub(count, remaining);
          t3 = this._buffers;
          t1.setRange$4(result, t2, bytesInFirst, $.getInterceptor$JSArray(t3).get$first(t3), this._index);
          this._buffers.removeFirst$0();
          this._index = 0;
          this._liblib0$_length = $.sub(this._liblib0$_length, bytesInFirst);
          remaining = $.sub(remaining, bytesInFirst);
        } else {
          t2 = $.sub(count, remaining);
          t3 = this._buffers;
          t1.setRange$4(result, t2, remaining, $.getInterceptor$JSArray(t3).get$first(t3), this._index);
          this._index = remaining;
          this._liblib0$_length = $.sub(this._liblib0$_length, remaining);
          remaining = 0;
        }
      }
      return result;
    }
  }
},
 removeBytes$1: function(count) {
  var t1, t3;
  if (typeof count !== 'number')
    return this.removeBytes$1$bailout(1, count);
  t1 = this.get$first();
  t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof t1 !== 'number')
    return this.removeBytes$1$bailout(2, count, t1);
  t3 = this._index;
  if (typeof t3 !== 'number')
    return this.removeBytes$1$bailout(3, count, t1, t3);
  if (count === t1 - t3) {
    this._buffers.removeFirst$0();
    this._index = 0;
  } else
    this._index = t3 + count;
  t1 = this._liblib0$_length;
  if (typeof t1 !== 'number')
    return this.removeBytes$1$bailout(5, count, t1);
  this._liblib0$_length = t1 - count;
},
 removeBytes$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      count = env0;
      break;
    case 2:
      t1 = env1;
      count = env0;
      break;
    case 3:
      t3 = env2;
      t1 = env1;
      count = env0;
      break;
    case 4:
      t1 = env1;
      count = env0;
      break;
    case 5:
      t1 = env1;
      count = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this.get$first();
      t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 2:
      state0 = 0;
      t3 = this._index;
    case 3:
      state0 = 0;
    case 4:
      if (state0 === 0 && $.eqB(count, $.sub(t1, t3))) {
        this._buffers.removeFirst$0();
        this._index = 0;
      } else
        switch (state0) {
          case 0:
            t1 = this._index;
          case 4:
            state0 = 0;
            this._index = $.add(t1, count);
        }
      t1 = this._liblib0$_length;
    case 5:
      var count, t1, t3;
      state0 = 0;
      this._liblib0$_length = $.sub(t1, count);
  }
},
 get$length: function() {
  return this._liblib0$_length;
},
 get$isEmpty: function() {
  var t1 = this._buffers;
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 clear$0: function() {
  this._index = 0;
  this._liblib0$_length = 0;
  this._buffers = $.Queue_Queue();
},
 _BufferList$0: function() {
  this.clear$0();
}
};

$$.HttpException = {"":"Object;message",
 toString$0: function() {
  return "HttpException: " + $.S(this.message);
},
 is$Exception: true
};

$$._HttpHeaders = {"":"Object;_mutable<,_headers>,_noFoldingHeaders,_host,_port",
 operator$index$1: function(name$) {
  name$ = $.getInterceptor$JSString(name$).toLowerCase$0(name$);
  return $.index(this._headers, name$);
},
 value$1: function(name$) {
  var values;
  name$ = $.getInterceptor$JSString(name$).toLowerCase$0(name$);
  values = $.index(this._headers, name$);
  if (values == null)
    return;
  if ($.gtB($.getInterceptor$JSStringJSArray(values).get$length(values), 1))
    throw $.$$throw($.HttpException$("More than one value for header " + $.S(name$)));
  return $.index(values, 0);
},
 get$value: function() {
  return new $.BoundClosure(this, 'value$1');
},
 add$2: function(name$, value) {
  var i;
  this._checkMutable$0();
  if (typeof value === 'object' && value !== null && (value.constructor === Array || !!value.is$List)) {
    if (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior)
      return this.add$2$bailout0(1, name$, value);
    for (i = 0; i < value.length; ++i)
      this._add$2(name$, value[i]);
  } else
    this._add$2(name$, value);
},
 add$2$bailout0: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      value = env1;
      name$ = env0;
      break;
  }
  switch (state0) {
    case 0:
      this._checkMutable$0();
    case 1:
      var value, name$, i;
      if (state0 === 1 || state0 === 0 && typeof value === 'object' && value !== null && (value.constructor === Array || !!value.is$List))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            for (i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(value).get$length(value)); ++i)
              this._add$2(name$, $.index(value, i));
        }
      else
        this._add$2(name$, value);
  }
},
 set$2: function(name$, value) {
  var name0;
  name$ = $.CONSTANT0.toLowerCase$0(name$);
  this._checkMutable$0();
  this._checkMutable$0();
  name0 = $.getInterceptor$JSString(name$).toLowerCase$0(name$);
  this._headers.remove$1(name0);
  this.add$2(name$, value);
},
 remove$2: function(name$, value) {
  var values, t1, index;
  this._checkMutable$0();
  name$ = $.CONSTANT0.toLowerCase$0(name$);
  values = $.index(this._headers, name$);
  if (!(values == null)) {
    t1 = $.getInterceptor$JSStringJSArray(values);
    index = t1.indexOf$1(values, value);
    if (!$.eqB(index, -1))
      t1.removeRange$2(values, index, 1);
  }
},
 forEach$1: function(f) {
  var t1 = this._headers;
  $.getInterceptor$JSArray(t1).forEach$1(t1, f);
},
 get$port: function() {
  return this._port;
},
 set$ifModifiedSince: function(ifModifiedSince) {
  this._checkMutable$0();
  this._set$2("if-modified-since", $._HttpUtils_formatDate(ifModifiedSince.toUtc$0()));
},
 set$date: function(date) {
  this._checkMutable$0();
  this._set$2("date", $._HttpUtils_formatDate(date.toUtc$0()));
},
 set$expires: function(expires) {
  this._checkMutable$0();
  this._set$2("expires", $._HttpUtils_formatDate(expires.toUtc$0()));
},
 _add$2: function(name$, value, exception) {
  var lowerCaseName, t1, pos, t2, values;
  lowerCaseName = $.getInterceptor$JSString(name$).toLowerCase$0(name$);
  if ($.eqB(lowerCaseName, "date")) {
    t1 = value;
    if (typeof t1 === 'object' && t1 !== null && !!t1.is$Date)
      this.set$date(value);
    else {
      t1 = value;
      if (typeof t1 === 'string')
        this._set$2("date", value);
      else
        throw $.$$throw($.HttpException$("Unexpected type for header named " + $.S(name$)));
    }
  } else if ($.eqB(lowerCaseName, "expires")) {
    t1 = value;
    if (typeof t1 === 'object' && t1 !== null && !!t1.is$Date)
      this.set$expires(value);
    else {
      t1 = value;
      if (typeof t1 === 'string')
        this._set$2("expires", value);
      else
        throw $.$$throw($.HttpException$("Unexpected type for header named " + $.S(name$)));
    }
  } else if ($.eqB(lowerCaseName, "if-modified-since")) {
    t1 = value;
    if (typeof t1 === 'object' && t1 !== null && !!t1.is$Date)
      this.set$ifModifiedSince(value);
    else {
      t1 = value;
      if (typeof t1 === 'string')
        this._set$2("if-modified-since", value);
      else
        throw $.$$throw($.HttpException$("Unexpected type for header named " + $.S(name$)));
    }
  } else if ($.eqB(lowerCaseName, "host")) {
    t1 = value;
    pos = $.getInterceptor$JSStringJSArray(t1).indexOf$1(t1, ":");
    if ($.eqB(pos, -1)) {
      this._host = value;
      this._port = 80;
    } else {
      if ($.gtB(pos, 0)) {
        t1 = value;
        this._host = $.getInterceptor$JSString(t1).substring$2(t1, 0, pos);
      } else
        this._host = null;
      t1 = $.add(pos, 1);
      t2 = value;
      if ($.eqB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2)))
        this._port = 80;
      else
        try {
          t1 = value;
          this._port = $.parseInt($.getInterceptor$JSString(t1).substring$1(t1, $.add(pos, 1)));
        } catch (exception) {
          t1 = $.unwrapException(exception);
          if (typeof t1 === 'object' && t1 !== null && !!t1.is$FormatException)
            this._port = null;
          else
            throw exception;
        }

    }
    this._set$2("host", value);
  } else if ($.eqB(lowerCaseName, "content-type"))
    this._set$2("content-type", value);
  else {
    values = $.index(this._headers, lowerCaseName);
    if (values == null) {
      values = $.List_List(null);
      $.indexSet(this._headers, lowerCaseName, values);
    }
    t1 = value;
    t1 = typeof t1 === 'object' && t1 !== null && !!t1.is$Date;
    t2 = $.getInterceptor$JSArray(values);
    if (t1)
      t2.add$1(values, $._HttpUtils_formatDate(value));
    else {
      t1 = value;
      t2.add$1(values, $.getInterceptor(t1).toString$0(t1));
    }
  }
},
 _set$2: function(name$, value) {
  var values;
  name$ = $.CONSTANT0.toLowerCase$0(name$);
  values = $.List_List(null);
  $.indexSet(this._headers, name$, values);
  values.push(value);
},
 get$_set: function() {
  return new $.BoundClosure0(this, '_set$2');
},
 _checkMutable$0: function() {
  if (this._mutable !== true)
    throw $.$$throw($.HttpException$("HTTP headers are not mutable"));
},
 _foldHeader$1: function(name$) {
  var t1;
  if (!$.eqB(name$, "set-cookie")) {
    t1 = this._noFoldingHeaders;
    t1 = !(t1 == null) && !$.eqB($.CONSTANT3.indexOf$1(t1, name$), -1);
  } else
    t1 = true;
  if (t1)
    return false;
  return true;
},
 _write$1: function(connection) {
  var t1, buffer, t2, t3;
  t1 = {};
  buffer = $.Uint8List_Uint8List(16384);
  t1.bufferPos_0 = 0;
  t2 = new $._HttpHeaders__write_writeBuffer(t1, connection, buffer);
  t3 = this._headers;
  $.getInterceptor$JSArray(t3).forEach$1(t3, new $._HttpHeaders__write_anon(t1, this, t2, 16384, buffer));
  t2.call$0();
},
 toString$0: function() {
  var sb, t1;
  sb = $.StringBuffer_StringBuffer("");
  t1 = this._headers;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HttpHeaders_toString_anon(sb, this));
  return $.getInterceptor(sb).toString$0(sb);
}
};

$$._Cookie = {"":"Object;name>,value=,expires,maxAge,domain,path,httpOnly<,secure",
 toString$0: function() {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer("");
  t1 = $.getInterceptor$JSArray(sb);
  t1.add$1(sb, this.name);
  t1.add$1(sb, "=");
  t1.add$1(sb, this.value);
  if (!(this.expires == null)) {
    t1.add$1(sb, "; Expires=");
    t1.add$1(sb, $._HttpUtils_formatDate(this.expires));
  }
  t2 = this.maxAge;
  if (!(t2 == null)) {
    t1.add$1(sb, "; Max-Age=");
    t1.add$1(sb, t2);
  }
  t2 = this.domain;
  if (!(t2 == null)) {
    t1.add$1(sb, "; Domain=");
    t1.add$1(sb, t2);
  }
  t2 = this.path;
  if (!(t2 == null)) {
    t1.add$1(sb, "; Path=");
    t1.add$1(sb, t2);
  }
  if (this.secure)
    t1.add$1(sb, "; Secure");
  if (this.httpOnly === true)
    t1.add$1(sb, "; HttpOnly");
  return t1.toString$0(sb);
}
};

$$._CloseQueue = {"":"Object;_q>",
 add$1: function(connection) {
  var t1, t2, t4;
  t1 = new $._CloseQueue_add_closeIfDone(connection, this);
  if (connection.get$_isFullyClosed() === true) {
    connection.get$_socket().close$0();
    if (!(connection.get$onClosed() == null))
      connection.onClosed$0();
    return;
  }
  t2 = connection.get$_state();
  if (t2 !== (t2 | 0))
    return this.add$1$bailout(1, connection, t2, t1);
  connection.set$_state((t2 | 2) >>> 0);
  t4 = this._q;
  $.getInterceptor$JSArray(t4).add$1(t4, connection);
  if (connection.get$_isWriteClosed() !== true) {
    connection.get$_socket().get$outputStream().close$0();
    t2 = new $._CloseQueue_add_anon(t1, connection);
    connection.get$_socket().get$outputStream().set$onClosed(t2);
  } else {
    t2 = new $._CloseQueue_add_anon0();
    connection.get$_socket().get$outputStream().set$onClosed(t2);
  }
  if (connection.get$_isReadClosed() !== true) {
    t2 = new $._CloseQueue_add_anon1(t1, connection);
    connection.get$_socket().set$onClosed(t2);
  } else {
    t2 = new $._CloseQueue_add_anon2();
    connection.get$_socket().set$onClosed(t2);
  }
  t2 = connection.get$_socket();
  t2.set$onData(t2.get$read());
  t1 = new $._CloseQueue_add_anon3(t1, connection);
  connection.get$_socket().set$onError(t1);
},
 add$1$bailout: function(state0, connection, t2, t1) {
  var t4;
  connection.set$_state($.or(t2, 2));
  t4 = this._q;
  $.getInterceptor$JSArray(t4).add$1(t4, connection);
  if (connection.get$_isWriteClosed() !== true) {
    connection.get$_socket().get$outputStream().close$0();
    t2 = new $._CloseQueue_add_anon(t1, connection);
    connection.get$_socket().get$outputStream().set$onClosed(t2);
  } else {
    t2 = new $._CloseQueue_add_anon0();
    connection.get$_socket().get$outputStream().set$onClosed(t2);
  }
  if (connection.get$_isReadClosed() !== true) {
    t2 = new $._CloseQueue_add_anon1(t1, connection);
    connection.get$_socket().set$onClosed(t2);
  } else {
    t2 = new $._CloseQueue_add_anon2();
    connection.get$_socket().set$onClosed(t2);
  }
  t2 = connection.get$_socket();
  t2.set$onData(t2.get$read());
  t1 = new $._CloseQueue_add_anon3(t1, connection);
  connection.get$_socket().set$onError(t1);
},
 shutdown$0: function() {
  var t1 = this._q;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._CloseQueue_shutdown_anon());
}
};

$$._HttpRequestResponseBase = {"":"Object;_state=,_headResponse<,_headers>,_cookies>,_protocolVersion=,_contentLength>",
 get$contentLength: function() {
  return this._contentLength;
},
 get$headers: function() {
  return this._headers;
},
 get$persistentConnection: function() {
  var connection, t1;
  connection = $.index(this.get$headers(), "Connection");
  if ($.eqB(this._protocolVersion, "1.1")) {
    if (connection == null)
      return true;
    t1 = $.index(this.get$headers(), "Connection");
    return $.getInterceptor$JSArray(t1).some$1(t1, new $._HttpRequestResponseBase_persistentConnection_anon()) !== true;
  } else {
    if (connection == null)
      return false;
    t1 = $.index(this.get$headers(), "Connection");
    return $.getInterceptor$JSArray(t1).some$1(t1, new $._HttpRequestResponseBase_persistentConnection_anon0());
  }
},
 set$persistentConnection: function(persistentConnection) {
  if (!(this.get$_outputStream() == null))
    throw $.$$throw($.HttpException$("Header already sent"));
  this.get$headers().remove$2("Connection", "close");
  this.get$headers().remove$2("Connection", "keep-alive");
  if ($.eqB(this._protocolVersion, "1.1") && persistentConnection !== true)
    this.get$headers().add$2("Connection", "close");
  else if ($.eqB(this._protocolVersion, "1.0") && persistentConnection === true)
    this.get$headers().add$2("Connection", "keep-alive");
},
 _write$2: function(data, copyBuffer) {
  var t1, t2, t3, allWritten;
  if (this._headResponse === true)
    return true;
  this._ensureHeadersSent$0();
  t1 = $.getInterceptor$JSStringJSArray(data);
  if ($.gtB(t1.get$length(data), 0)) {
    t2 = $.ltB(this._contentLength, 0);
    t3 = this._httpConnection;
    if (t2) {
      this._writeHexString$1(t1.get$length(data));
      this._writeCRLF$0();
      t3._write$2(data, copyBuffer);
      allWritten = this._writeCRLF$0();
    } else {
      this._updateContentLength$1(t1.get$length(data));
      allWritten = t3._write$2(data, copyBuffer);
    }
  } else
    allWritten = true;
  return allWritten;
},
 _writeList$3: function(data, offset, count) {
  var t1, t2, allWritten;
  if (this._headResponse === true)
    return true;
  this._ensureHeadersSent$0();
  if ($.gtB(count, 0)) {
    t1 = $.ltB(this._contentLength, 0);
    t2 = this._httpConnection;
    if (t1) {
      this._writeHexString$1(count);
      this._writeCRLF$0();
      t2._writeFrom$3(data, offset, count);
      allWritten = this._writeCRLF$0();
    } else {
      this._updateContentLength$1(count);
      allWritten = t2._writeFrom$3(data, offset, count);
    }
  } else
    allWritten = true;
  return allWritten;
},
 _writeDone$0: function() {
  if ($.ltB(this._contentLength, 0))
    var allWritten = this._httpConnection._write$1($.CONSTANT7);
  else {
    if (this._headResponse !== true && $.ltB(this._bodyBytesWritten, this._contentLength))
      throw $.$$throw($.HttpException$("Sending less than specified content length"));
    allWritten = true;
  }
  return allWritten;
},
 _writeHeaders$0: function() {
  this._headers.set$_mutable(false);
  this._headers._write$1(this._httpConnection);
  return this._writeCRLF$0();
},
 _writeHexString$1: function(x) {
  var hexDigits, hex, index, t1, t2;
  if (x !== (x | 0))
    return this._writeHexString$1$bailout(1, x);
  hexDigits = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];
  hex = $.Uint8List_Uint8List(10);
  if (typeof hex !== 'object' || hex === null || (hex.constructor !== Array || !!hex.immutable$list) && !hex.is$JavaScriptIndexingBehavior)
    return this._writeHexString$1$bailout(2, x, hexDigits, hex);
  index = hex.length;
  for (; t1 = x > 0, t2 = hex.length, t1;) {
    --index;
    t1 = $.mod(x, 16);
    if (t1 < 0 || t1 >= hexDigits.length)
      throw $.ioore(t1);
    t1 = hexDigits[t1];
    if (index < 0 || index >= t2)
      throw $.ioore(index);
    hex[index] = t1;
    x = $.shr(x, 4);
  }
  return this._httpConnection._writeFrom$3(hex, index, t2 - index);
},
 _writeHexString$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      x = env0;
      break;
    case 2:
      hex = env2;
      hexDigits = env1;
      x = env0;
      break;
    case 3:
      t2 = env4;
      hex = env3;
      hexDigits = env2;
      index = env1;
      x = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      hexDigits = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];
      hex = $.Uint8List_Uint8List(10);
    case 2:
      state0 = 0;
      t2 = $.getInterceptor$JSStringJSArray(hex);
      index = t2.get$length(hex);
    case 3:
      var x, hexDigits, hex, t2, index, t1;
      state0 = 0;
      for (; $.gtB(x, 0);) {
        index = $.sub(index, 1);
        t1 = $.mod(x, 16);
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= hexDigits.length)
          throw $.ioore(t1);
        $.indexSet(hex, index, hexDigits[t1]);
        x = $.shr(x, 4);
      }
      return this._httpConnection._writeFrom$3(hex, index, $.sub(t2.get$length(hex), index));
  }
},
 _writeCRLF$0: function() {
  return this._httpConnection._write$1($.CONSTANT8);
},
 _writeSP$0: function() {
  return this._httpConnection._write$1($.CONSTANT11);
},
 _ensureHeadersSent$0: function() {
  if ($.eqB(this._state, 0))
    this._writeHeader$0();
},
 _updateContentLength$1: function(bytes) {
  var t1 = this._bodyBytesWritten;
  if (typeof bytes !== 'number')
    throw $.iae(bytes);
  if ($.gtB(t1 + bytes, this._contentLength))
    throw $.$$throw($.HttpException$("Writing more than specified content length"));
  this._bodyBytesWritten = this._bodyBytesWritten + bytes;
},
 get$_done: function() {
  return $.eq(this._state, 2);
}
};

$$._HttpRequest = {"":"_HttpRequestResponseBase;_method,_uri,_path,_queryString,_queryParameters,_inputStream,_liblib0$_buffer,_streamErrorHandler>,_session>,_state,_headResponse,_httpConnection,_headers,_cookies,_protocolVersion,_contentLength,_bodyBytesWritten",
 get$cookies: function() {
  var t1, headerValues;
  t1 = this._cookies;
  if (!(t1 == null))
    return t1;
  t1 = new $._HttpRequest_cookies__parseCookieString(this);
  this._cookies = $.List_List(null);
  headerValues = $.index(this.get$headers(), "cookie");
  if (!(headerValues == null))
    $.getInterceptor$JSArray(headerValues).forEach$1(headerValues, new $._HttpRequest_cookies_anon(t1));
  return this._cookies;
},
 get$inputStream: function() {
  if (this._inputStream == null)
    this._inputStream = $._HttpInputStream$(this);
  return this._inputStream;
},
 _onRequestReceived$4: function(method, uri, version, headers) {
  var t1, t2, sessionId;
  this._method = method;
  this._uri = uri;
  this._parseRequestUri$1(uri);
  this._headers = headers;
  t1 = this._httpConnection;
  if (!(t1._server.get$_sessionManagerInstance() == null)) {
    t2 = this.get$cookies();
    sessionId = $.getInterceptor$JSArray(t2).reduce$2(t2, null, new $._HttpRequest__onRequestReceived_anon());
    if (!(sessionId == null)) {
      this._session = t1._server.get$_sessionManager().getSession$1(sessionId);
      t2 = this._session;
      if (!(t2 == null))
        t2._markSeen$0();
    }
  }
  this._contentLength = t1._httpParser.get$contentLength();
  this._headers.set$_mutable(false);
  this._liblib0$_buffer = $._BufferList$();
},
 get$_onRequestReceived: function() {
  return new $.BoundClosure1(this, '_onRequestReceived$4');
},
 _onDataReceived$1: function(data) {
  var t1 = this._liblib0$_buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, data);
  t1 = this._inputStream;
  if (!(t1 == null))
    t1._dataReceived$0();
},
 get$_onDataReceived: function() {
  return new $.BoundClosure(this, '_onDataReceived$1');
},
 _onDataEnd$0: function() {
  var t1 = this._inputStream;
  if (!(t1 == null))
    t1._closeReceived$0();
  else
    this.get$inputStream().set$_streamMarkedClosed(true);
},
 get$_onDataEnd: function() {
  return new $.BoundClosure2(this, '_onDataEnd$0');
},
 _parseRequestUri$1: function(uri) {
  var position, t1, t2;
  position = $.getInterceptor$JSStringJSArray(uri).indexOf$2(uri, "?", 0);
  t1 = $.eqB(position, -1);
  t2 = this._uri;
  if (t1) {
    this._path = $._HttpUtils_decodeUrlEncodedString(t2);
    this._queryString = null;
    this._queryParameters = $.Map_Map();
  } else {
    this._path = $._HttpUtils_decodeUrlEncodedString($.getInterceptor$JSString(t2).substring$2(t2, 0, position));
    t1 = this._uri;
    this._queryString = $.getInterceptor$JSString(t1).substring$1(t1, $.add(position, 1));
    this._queryParameters = $._HttpUtils_splitQueryString(this._queryString);
  }
},
 _streamAvailable$0: function() {
  var t1 = this._liblib0$_buffer;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 _streamRead$1: function(bytesToRead) {
  return this._liblib0$_buffer.readBytes$1(bytesToRead);
},
 _streamSetErrorHandler$1: function(callback) {
  this._streamErrorHandler = callback;
},
 _streamErrorHandler$1: function(arg0) {
  return this._streamErrorHandler.call$1(arg0);
}
};

$$._HttpResponse = {"":"_HttpRequestResponseBase;_statusCode,_reasonPhrase,_outputStream>,_streamErrorHandler>,_state,_headResponse,_httpConnection,_headers,_cookies,_protocolVersion,_contentLength,_bodyBytesWritten",
 set$contentLength: function(contentLength) {
  if ($.geB(this._state, 1))
    throw $.$$throw($.HttpException$("Header already sent"));
  this._contentLength = contentLength;
},
 set$statusCode: function(statusCode) {
  if (!(this._outputStream == null))
    throw $.$$throw($.HttpException$("Header already sent"));
  this._statusCode = statusCode;
},
 get$reasonPhrase: function() {
  return this._findReasonPhrase$1(this._statusCode);
},
 get$cookies: function() {
  if (this._cookies == null)
    this._cookies = $.List_List(null);
  return this._cookies;
},
 get$outputStream: function() {
  if ($.geB(this._state, 2))
    throw $.$$throw($.HttpException$("Response closed"));
  if (this._outputStream == null)
    this._outputStream = $._HttpOutputStream$(this);
  return this._outputStream;
},
 _streamWrite$2: function(buffer, copyBuffer) {
  if (this.get$_done() === true)
    throw $.$$throw($.HttpException$("Response closed"));
  return this._write$2(buffer, copyBuffer);
},
 _streamWriteFrom$3: function(buffer, offset, len) {
  if (this.get$_done() === true)
    throw $.$$throw($.HttpException$("Response closed"));
  return this._writeList$3(buffer, offset, len);
},
 _streamClose$0: function() {
  this._ensureHeadersSent$0();
  this._state = 2;
  var t1 = this._httpConnection;
  t1.set$_onNoPendingWrites(null);
  this._writeDone$0();
  t1._responseClosed$0();
},
 _streamSetNoPendingWriteHandler$1: function(callback) {
  if (!$.eqB(this._state, 2))
    this._httpConnection.set$_onNoPendingWrites(callback);
},
 _streamSetCloseHandler$1: function(callback) {
},
 _streamSetErrorHandler$1: function(callback) {
  this._streamErrorHandler = callback;
},
 _findReasonPhrase$1: function(statusCode) {
  var t1 = this._reasonPhrase;
  if (!(t1 == null))
    return t1;
  switch (statusCode) {
    case 100:
      return "Continue";
    case 101:
      return "Switching Protocols";
    case 200:
      return "OK";
    case 201:
      return "Created";
    case 202:
      return "Accepted";
    case 203:
      return "Non-Authoritative Information";
    case 204:
      return "No Content";
    case 205:
      return "Reset Content";
    case 206:
      return "Partial Content";
    case 300:
      return "Multiple Choices";
    case 301:
      return "Moved Permanently";
    case 302:
      return "Found";
    case 303:
      return "See Other";
    case 304:
      return "Not Modified";
    case 305:
      return "Use Proxy";
    case 307:
      return "Temporary Redirect";
    case 400:
      return "Bad Request";
    case 401:
      return "Unauthorized";
    case 402:
      return "Payment Required";
    case 403:
      return "Forbidden";
    case 404:
      return "Not Found";
    case 405:
      return "Method Not Allowed";
    case 406:
      return "Not Acceptable";
    case 407:
      return "Proxy Authentication Required";
    case 408:
      return "Request Time-out";
    case 409:
      return "Conflict";
    case 410:
      return "Gone";
    case 411:
      return "Length Required";
    case 412:
      return "Precondition Failed";
    case 413:
      return "Request Entity Too Large";
    case 414:
      return "Request-URI Too Large";
    case 415:
      return "Unsupported Media Type";
    case 416:
      return "Requested range not satisfiable";
    case 417:
      return "Expectation Failed";
    case 500:
      return "Internal Server Error";
    case 501:
      return "Not Implemented";
    case 502:
      return "Bad Gateway";
    case 503:
      return "Service Unavailable";
    case 504:
      return "Gateway Time-out";
    case 505:
      return "Http Version not supported";
    default:
      return "Status " + $.S(statusCode);
  }
},
 _writeHeader$0: function() {
  var t1, t2, data, t3, session, i, found, allWritten;
  t1 = $.eqB(this._protocolVersion, "1.1");
  t2 = this._httpConnection;
  if (t1)
    t2._write$1($.CONSTANT9);
  else
    t2._write$1($.CONSTANT10);
  this._writeSP$0();
  t1 = this._statusCode;
  t1 = $.getInterceptor(t1).toString$0(t1);
  data = $.getInterceptor$JSString(t1).get$charCodes(t1);
  t1 = this._httpConnection;
  t1._write$1(data);
  this._writeSP$0();
  t2 = this.get$reasonPhrase();
  t1._write$1($.getInterceptor$JSString(t2).get$charCodes(t2));
  this._writeCRLF$0();
  if ($.geB(this._contentLength, 0)) {
    t2 = this._headers;
    t3 = this._contentLength;
    t2.set$2("Content-Length", $.getInterceptor(t3).toString$0(t3));
  } else if ($.ltB(this._contentLength, 0) && $.eqB(this._protocolVersion, "1.1"))
    this._headers.set$2("Transfer-Encoding", "chunked");
  session = t1._request.get$_session();
  if (!(session == null) && session.get$_destroyed() !== true) {
    for (i = 0; t1 = this.get$cookies(), found = false, $.ltB(i, $.getInterceptor$JSStringJSArray(t1).get$length(t1)); ++i) {
      t1 = $.index(this.get$cookies(), i).get$name();
      if ($.eqB($.getInterceptor$JSString(t1).toUpperCase$0(t1), "DARTSESSID")) {
        t1 = session.get$id();
        $.index(this.get$cookies(), i).set$value(t1);
        $.index(this.get$cookies(), i).set$httpOnly(true);
        found = true;
        break;
      }
    }
    if (!found) {
      t1 = this.get$cookies();
      t2 = $.getInterceptor$JSArray(t1);
      t3 = $.Cookie_Cookie("DARTSESSID", session.get$id());
      t3.set$httpOnly(true);
      t2.add$1(t1, t3);
    }
  }
  t1 = this._cookies;
  if (!(t1 == null))
    $.getInterceptor$JSArray(t1).forEach$1(t1, new $._HttpResponse__writeHeader_anon(this));
  allWritten = this._writeHeaders$0();
  this._state = 1;
  return allWritten;
},
 _streamErrorHandler$1: function(arg0) {
  return this._streamErrorHandler.call$1(arg0);
},
 _HttpResponse$1: function(httpConnection) {
  this._headers = $._HttpHeaders$();
}
};

$$._HttpInputStream = {"":"_BaseDataInputStream;_requestOrResponse,_streamMarkedClosed,_closeCallbackCalled,_scheduledDataCallback,_scheduledCloseCallback,_clientDataHandler,_clientCloseHandler,_clientErrorHandler",
 available$0: function() {
  return this._requestOrResponse._streamAvailable$0();
},
 _read$1: function(bytesToRead) {
  var result = this._requestOrResponse._streamRead$1(bytesToRead);
  this._checkScheduleCallbacks$0();
  return result;
},
 set$onError: function(callback) {
  this._requestOrResponse._streamSetErrorHandler$1(callback);
},
 _close$0: function() {
},
 _dataReceived$0: function() {
  $._BaseDataInputStream.prototype._dataReceived$0.call(this);
},
 _HttpInputStream$1: function(_requestOrResponse) {
  this._checkScheduleCallbacks$0();
}
};

$$._HttpOutputStream = {"":"_BaseOutputStream;_requestOrResponse,_onError",
 write$2: function(buffer, copyBuffer) {
  return this._requestOrResponse._streamWrite$2(buffer, copyBuffer);
},
 write$1: function(buffer) {
  return this.write$2(buffer, true);
},
 writeFrom$3: function(buffer, offset, len) {
  if ($.ltB(offset, 0) || $.geB(offset, $.getInterceptor$JSStringJSArray(buffer).get$length(buffer)))
    throw $.$$throw($.ArgumentError$(null));
  len = !(len == null) ? len : $.sub($.getInterceptor$JSStringJSArray(buffer).get$length(buffer), offset);
  if ($.ltB(len, 0))
    throw $.$$throw($.ArgumentError$(null));
  return this._requestOrResponse._streamWriteFrom$3(buffer, offset, len);
},
 close$0: function() {
  this._requestOrResponse._streamClose$0();
},
 destroy$0: function() {
  throw $.$$throw("Not implemented");
},
 set$onNoPendingWrites: function(callback) {
  this._requestOrResponse._streamSetNoPendingWriteHandler$1(callback);
},
 set$onClosed: function(callback) {
  this._requestOrResponse._streamSetCloseHandler$1(callback);
},
 set$onError: function(callback) {
  this._requestOrResponse._streamSetErrorHandler$1(callback);
}
};

$$._HttpConnectionBase = {"":"Object;_state=,_socket>,_httpParser>,onClosed=,hashCode>",
 get$_isRequestDone: function() {
  return $.eq($.and(this._state, 4), 4);
},
 get$_isResponseDone: function() {
  return $.eq($.and(this._state, 8), 8);
},
 get$_isAllDone: function() {
  return $.eq($.and(this._state, 12), 12);
},
 get$_isReadClosed: function() {
  return $.eq($.and(this._state, 16), 16);
},
 get$_isWriteClosed: function() {
  return $.eq($.and(this._state, 32), 32);
},
 get$_isFullyClosed: function() {
  return $.eq($.and(this._state, 48), 48);
},
 _connectionEstablished$1: function(socket) {
  var t1;
  this._socket = socket;
  t1 = new $._HttpConnectionBase__connectionEstablished_anon(this);
  this._socket.set$onData(t1);
  t1 = this._httpParser.get$streamDone();
  this._socket.set$onClosed(t1);
  t1 = this._httpParser.get$streamError();
  this._socket.set$onError(t1);
  t1 = new $._HttpConnectionBase__connectionEstablished_anon0();
  this._socket.get$outputStream().set$onError(t1);
},
 set$_onNoPendingWrites: function(callback) {
  this._socket.get$outputStream().set$onNoPendingWrites(callback);
},
 onClosed$0: function() {
  return this.onClosed.call$0();
},
 _HttpConnectionBase$0: function() {
  $._HttpConnectionBase__nextHashCode = $.and($.add($._HttpConnectionBase__nextHashCode, 1), 268435455);
}
};

$$._HttpConnection = {"":"_HttpConnectionBase;_server,_request,_response,_hasBody,_liblib0$_buffer,onRequestReceived,onError<,_state,_socket,_httpParser,onDetach,onClosed,hashCode",
 _bufferData$2: function(data, copyBuffer) {
  var t1;
  if (this._liblib0$_buffer == null)
    this._liblib0$_buffer = $._BufferList$();
  if (copyBuffer === true) {
    t1 = $.getInterceptor$JSArray(data);
    data = t1.getRange$2(data, 0, t1.get$length(data));
  }
  t1 = this._liblib0$_buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, data);
},
 _writeBufferedResponse$0: function() {
  var t1, data;
  if (!(this._liblib0$_buffer == null)) {
    for (; t1 = this._liblib0$_buffer, $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) !== true;) {
      t1 = this._liblib0$_buffer;
      data = $.getInterceptor$JSArray(t1).get$first(t1);
      this._socket.get$outputStream().write$2(data, false);
      this._liblib0$_buffer.removeBytes$1($.getInterceptor$JSStringJSArray(data).get$length(data));
    }
    this._liblib0$_buffer = null;
  }
},
 _write$2: function(data, copyBuffer) {
  if (this.get$_isRequestDone() === true || this._hasBody !== true || this._httpParser.get$upgrade() === true)
    return this._socket.get$outputStream().write$2(data, copyBuffer);
  else {
    this._bufferData$2(data, copyBuffer);
    return false;
  }
},
 _write$1: function(data) {
  return this._write$2(data, false);
},
 _writeFrom$3: function(data, offset, len) {
  var t1;
  if (this.get$_isRequestDone() === true || this._hasBody !== true || this._httpParser.get$upgrade() === true)
    return this._socket.get$outputStream().writeFrom$3(data, offset, len);
  else {
    if (offset == null)
      offset = 0;
    if (len == null) {
      t1 = this.get$buffer();
      len = $.sub($.getInterceptor$JSStringJSArray(t1).get$length(t1), offset);
    }
    this._bufferData$2($.getInterceptor$JSArray(data).getRange$2(data, offset, len), false);
    return false;
  }
},
 _close$0: function() {
  this._socket.get$outputStream().close$0();
},
 _destroy$0: function() {
  this._socket.close$0();
},
 _onClosed$0: function() {
  this._state = $.or(this._state, 16);
  this._checkDone$0();
},
 get$_onClosed: function() {
  return new $.BoundClosure2(this, '_onClosed$0');
},
 _onError$1: function(e) {
  var t1;
  this.onError$1(e);
  t1 = this._request;
  if (!(t1 == null) && !(t1.get$_streamErrorHandler() == null))
    t1._streamErrorHandler$1(e);
  t1 = this._response;
  if (!(t1 == null) && !(t1.get$_streamErrorHandler() == null))
    t1._streamErrorHandler$1(e);
  t1 = this._socket;
  if (!(t1 == null))
    t1.close$0();
},
 get$_onError: function() {
  return new $.BoundClosure(this, '_onError$1');
},
 _onRequestReceived$5: function(method, uri, version, headers, hasBody) {
  var t1;
  this._state = 1;
  this._request = $._HttpRequest$(this);
  this._response = $._HttpResponse$(this);
  this._request._onRequestReceived$4(method, uri, version, headers);
  this._request.set$_protocolVersion(version);
  this._response.set$_protocolVersion(version);
  t1 = $.eq(method, "HEAD");
  this._response.set$_headResponse(t1);
  t1 = this._httpParser.get$persistentConnection();
  this._response.set$persistentConnection(t1);
  this._hasBody = hasBody;
  if (!(this.onRequestReceived == null))
    this.onRequestReceived$2(this._request, this._response);
  this._checkDone$0();
},
 get$_onRequestReceived: function() {
  return new $.BoundClosure3(this, '_onRequestReceived$5');
},
 _onDataReceived$1: function(data) {
  this._request._onDataReceived$1(data);
  this._checkDone$0();
},
 get$_onDataReceived: function() {
  return new $.BoundClosure(this, '_onDataReceived$1');
},
 _checkDone$0: function() {
  var t1, close$;
  if (this.get$_isReadClosed() === true) {
    t1 = this._server.get$_closeQueue();
    $.getInterceptor$JSArray(t1).add$1(t1, this);
  } else if (this.get$_isAllDone() === true) {
    if (this._response.get$persistentConnection() === true)
      close$ = $.eqB(this._response.get$_protocolVersion(), "1.0") && $.ltB(this._response.get$_contentLength(), 0);
    else
      close$ = true;
    this._request = null;
    this._response = null;
    if (close$) {
      t1 = this._server.get$_closeQueue();
      $.getInterceptor$JSArray(t1).add$1(t1, this);
    } else
      this._state = 0;
  } else if (this.get$_isResponseDone() === true && this._hasBody === true) {
    this._writeBufferedResponse$0();
    this._socket.get$outputStream().close$0();
    t1 = this._server.get$_closeQueue();
    $.getInterceptor$JSArray(t1).add$1(t1, this);
  }
},
 _onDataEnd$1: function(close$) {
  this._state = $.or(this._state, 4);
  this._writeBufferedResponse$0();
  this._request._onDataEnd$0();
  this._checkDone$0();
},
 get$_onDataEnd: function() {
  return new $.BoundClosure(this, '_onDataEnd$1');
},
 _responseClosed$0: function() {
  this._state = $.or(this._state, 8);
},
 onRequestReceived$2: function(arg0, arg1) {
  return this.onRequestReceived.call$2(arg0, arg1);
},
 onError$1: function(arg0) {
  return this.onError.call$1(arg0);
},
 _HttpConnection$1: function(_server) {
  var t1;
  this._httpParser = $._HttpParser$requestParser();
  t1 = this.get$_onRequestReceived();
  this._httpParser.set$requestStart(t1);
  t1 = this.get$_onDataReceived();
  this._httpParser.set$dataReceived(t1);
  t1 = this.get$_onDataEnd();
  this._httpParser.set$dataEnd(t1);
  t1 = this.get$_onError();
  this._httpParser.set$error(t1);
  t1 = this.get$_onClosed();
  this._httpParser.set$closed(t1);
  t1 = new $.anon();
  this._httpParser.set$responseStart(t1);
}
};

$$._HttpServer = {"":"Object;_server,_closeServer,_secure,_connections>,_handlers,_defaultHandler,_onError>,_closeQueue>,_sessionManagerInstance>",
 listen$4$backlog$certificate_name: function(host, port, backlog, certificate_name) {
  if (this._secure)
    this.listenOn$1($.SecureServerSocket_SecureServerSocket(host, port, backlog, certificate_name, false, false));
  else
    this.listenOn$1($.ServerSocket_ServerSocket(host, port, backlog));
  this._closeServer = true;
},
 listen$2: function(host, port) {
  return this.listen$4$backlog$certificate_name(host, port, 128, null);
},
 listenOn$1: function(serverSocket) {
  var t1 = this._secure;
  if (t1 && !(typeof serverSocket === 'object' && serverSocket !== null && !!serverSocket.is$SecureServerSocket))
    throw $.$$throw($.HttpException$("HttpsServer.listenOn was called with non-secure server socket"));
  else if (!t1 && typeof serverSocket === 'object' && serverSocket !== null && !!serverSocket.is$SecureServerSocket)
    throw $.$$throw($.HttpException$("HttpServer.listenOn was called with a secure server socket"));
  serverSocket.set$onConnection(new $._HttpServer_listenOn_onConnection(this));
  this._server = serverSocket;
  this._closeServer = false;
},
 set$defaultRequestHandler: function(handler) {
  this._defaultHandler = handler;
},
 close$0: function() {
  var t1, t2, t3;
  this._closeQueue.shutdown$0();
  t1 = this._sessionManagerInstance;
  if (!(t1 == null)) {
    t1.close$0();
    this._sessionManagerInstance = null;
  }
  t1 = this._server;
  if (!(t1 == null) && this._closeServer)
    t1.close$0();
  this._server = null;
  for (t1 = this._connections, t2 = $.getInterceptor$JSArray(t1), t3 = t2.iterator$0(t1); t3.get$hasNext() === true;)
    t3.next$0()._destroy$0();
  t2.clear$0(t1);
},
 get$port: function() {
  var t1 = this._server;
  if (t1 == null)
    throw $.$$throw($.HttpException$("The HttpServer is not listening on a port."));
  return t1.get$port();
},
 set$onError: function(callback) {
  this._onError = callback;
},
 _handleRequest$2: function(request, response, exception) {
  var t1, i, handler, e;
  for (t1 = this._handlers, i = 0; i < t1.length; ++i)
    if (t1[i]._matcher$1(request) === true) {
      if (i >= t1.length)
        throw $.ioore(i);
      handler = t1[i].get$_handler();
      try {
        handler.call$2(request, response);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        if (!(this._onError == null))
          this._onError$1(e);
        else
          throw $.$$throw(e);
      }

      return;
    }
  if (!(this._defaultHandler == null))
    this._defaultHandler$2(request, response);
  else {
    response.set$statusCode(404);
    response.set$contentLength(0);
    response.get$outputStream().close$0();
  }
},
 get$_handleRequest: function() {
  return new $.BoundClosure0(this, '_handleRequest$2');
},
 get$_sessionManager: function() {
  if (this._sessionManagerInstance == null)
    this._sessionManagerInstance = $._HttpSessionManager$();
  return this._sessionManagerInstance;
},
 _defaultHandler$2: function(arg0, arg1) {
  return this._defaultHandler.call$2(arg0, arg1);
},
 _onError$1: function(arg0) {
  return this._onError.call$1(arg0);
}
};

$$._HttpParser = {"":"Object;_liblib0$_buffer,_index,_lastIndex,_requestParser>,_state=,_httpVersionIndex,_messageType,_statusCode,_method_or_status_code,_uri_or_reason_phrase,_headerField,_headerValue,_httpVersion,_contentLength>,_persistentConnection,_connectionUpgrade,_chunked,_responseToMethod,_remainingContent,_headers>,requestStart<,responseStart<,dataReceived<,dataEnd<,error<,closed<",
 _parse$0: function(exception) {
  var t1, t2, byte$, i, t3, headerField, headerValue, reportHeader, tokens, i0, token, noBody, value, dataAvailable, data, e;
  try {
    if ($.eqB(this._state, 25))
      throw $.$$throw($.HttpParserException$("Data on closed connection"));
    if ($.eqB(this._state, 26))
      throw $.$$throw($.HttpParserException$("Data on upgraded connection"));
    if ($.eqB(this._state, 28))
      throw $.$$throw($.HttpParserException$("Data on failed connection"));
    if ($.eqB(this._state, 27))
      throw $.$$throw($.HttpParserException$("Data on canceled connection"));
    while (true) {
      if (!(!(this._liblib0$_buffer == null) && $.ltB(this._index, this._lastIndex) && $.leB(this._state, 25)))
        break;
      c$0: {
        t1 = this._liblib0$_buffer;
        t2 = this._index;
        this._index = $.add(t2, 1);
        byte$ = $.index(t1, t2);
        switch (this._state) {
          case 0:
            t1 = byte$;
            if (0 >= $.CONSTANT12.length)
              throw $.ioore(0);
            if ($.eqB(t1, $.CONSTANT12[0])) {
              this._httpVersionIndex = 1;
              this._state = 1;
            } else {
              t1 = byte$;
              t1 = $.gtB(t1, 31) && $.ltB(t1, 128) && $.eqB($.CONSTANT1.indexOf$1($.CONSTANT13, t1), -1);
              if (!t1)
                throw $.$$throw($.HttpParserException$("Invalid request method"));
              t1 = this._method_or_status_code;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
              if (this._requestParser !== true)
                throw $.$$throw($.HttpParserException$("Invalid response line"));
              this._state = 3;
            }
            break;
          case 1:
            if ($.ltB(this._httpVersionIndex, 4)) {
              t1 = byte$;
              t2 = this._httpVersionIndex;
              if (t2 !== (t2 | 0))
                throw $.iae(t2);
              if (t2 < 0 || t2 >= $.CONSTANT12.length)
                throw $.ioore(t2);
              t1 = $.eqB(t1, $.CONSTANT12[t2]);
            } else
              t1 = false;
            if (t1)
              this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
            else if ($.eqB(this._httpVersionIndex, 4) && $.eqB(byte$, 47)) {
              this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
              if (this._requestParser === true)
                throw $.$$throw($.HttpParserException$("Invalid request line"));
              this._state = 2;
            } else {
              for (i = 0; $.ltB(i, this._httpVersionIndex); i = $.add(i, 1)) {
                t1 = this._method_or_status_code;
                t2 = $.getInterceptor$JSArray(t1);
                t3 = i;
                if (t3 !== (t3 | 0))
                  throw $.iae(t3);
                if (t3 < 0 || t3 >= $.CONSTANT12.length)
                  throw $.ioore(t3);
                t2.add$1(t1, $.CONSTANT12[t3]);
              }
              if ($.eqB(byte$, 32))
                this._state = 4;
              else {
                t1 = this._method_or_status_code;
                $.getInterceptor$JSArray(t1).add$1(t1, byte$);
                this._httpVersion = 0;
                if (this._requestParser !== true)
                  throw $.$$throw($.HttpParserException$("Invalid response line"));
                this._state = 3;
              }
            }
            break;
          case 2:
            if ($.ltB(this._httpVersionIndex, 7)) {
              t1 = byte$;
              t2 = this._httpVersionIndex;
              if (t2 !== (t2 | 0))
                throw $.iae(t2);
              if (t2 < 0 || t2 >= $.CONSTANT14.length)
                throw $.ioore(t2);
              this._expect$2(t1, $.CONSTANT14[t2]);
              this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
            } else if ($.eqB(this._httpVersionIndex, 7) && $.eqB(byte$, 49)) {
              this._httpVersion = 2;
              this._persistentConnection = true;
              this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
            } else if ($.eqB(this._httpVersionIndex, 7) && $.eqB(byte$, 48)) {
              this._httpVersion = 1;
              this._persistentConnection = false;
              this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
            } else if ($.eqB(this._httpVersionIndex, 8)) {
              this._expect$2(byte$, 32);
              this._state = 7;
            } else
              throw $.$$throw($.HttpParserException$("Invalid response line"));
            break;
          case 3:
            if ($.eqB(byte$, 32))
              this._state = 4;
            else {
              if (!$.eqB($.CONSTANT1.indexOf$1($.CONSTANT15, byte$), -1))
                throw $.$$throw($.HttpParserException$("Invalid request method"));
              t1 = this._method_or_status_code;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
            }
            break;
          case 4:
            if ($.eqB(byte$, 32)) {
              t1 = this._uri_or_reason_phrase;
              if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
                throw $.$$throw($.HttpParserException$("Invalid request URI"));
              this._state = 5;
              this._httpVersionIndex = 0;
            } else {
              if ($.eqB(byte$, 13) || $.eqB(byte$, 10))
                throw $.$$throw($.HttpParserException$("Invalid request URI"));
              t1 = this._uri_or_reason_phrase;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
            }
            break;
          case 5:
            if ($.ltB(this._httpVersionIndex, 7)) {
              t1 = byte$;
              t2 = this._httpVersionIndex;
              if (t2 !== (t2 | 0))
                throw $.iae(t2);
              if (t2 < 0 || t2 >= $.CONSTANT9.length)
                throw $.ioore(t2);
              this._expect$2(t1, $.CONSTANT9[t2]);
              this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
            } else if ($.eqB(this._httpVersionIndex, 7))
              if ($.eqB(byte$, 49)) {
                this._httpVersion = 2;
                this._persistentConnection = true;
                this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
              } else if ($.eqB(byte$, 48)) {
                this._httpVersion = 1;
                this._persistentConnection = false;
                this._httpVersionIndex = $.add(this._httpVersionIndex, 1);
              } else
                throw $.$$throw($.HttpParserException$("Invalid response line"));
            else {
              this._expect$2(byte$, 13);
              this._state = 6;
            }
            break;
          case 6:
            this._expect$2(byte$, 10);
            this._messageType = 1;
            this._state = 10;
            break;
          case 7:
            if ($.eqB(byte$, 32)) {
              t1 = this._method_or_status_code;
              if (!$.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 3))
                throw $.$$throw($.HttpParserException$("Invalid response status code"));
              this._state = 8;
            } else if ($.ltB(byte$, 48) && $.ltB(57, byte$))
              throw $.$$throw($.HttpParserException$("Invalid response status code"));
            else {
              t1 = this._method_or_status_code;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
            }
            break;
          case 8:
            if ($.eqB(byte$, 13)) {
              t1 = this._uri_or_reason_phrase;
              if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
                throw $.$$throw($.HttpParserException$("Invalid response reason phrase"));
              this._state = 9;
            } else {
              if ($.eqB(byte$, 13) || $.eqB(byte$, 10))
                throw $.$$throw($.HttpParserException$("Invalid response reason phrase"));
              t1 = this._uri_or_reason_phrase;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
            }
            break;
          case 9:
            this._expect$2(byte$, 10);
            this._statusCode = $.parseInt($.String_String$fromCharCodes(this._method_or_status_code));
            if ($.ltB(this._statusCode, 100) || $.gtB(this._statusCode, 599))
              throw $.$$throw($.HttpParserException$("Invalid response status code"));
            this._state = 10;
            break;
          case 10:
            if ($.eqB(byte$, 13))
              this._state = 16;
            else {
              t1 = this._headerField;
              $.getInterceptor$JSArray(t1).add$1(t1, this._toLowerCase$1(byte$));
              this._state = 11;
            }
            break;
          case 11:
            if ($.eqB(byte$, 58))
              this._state = 12;
            else {
              t1 = byte$;
              t1 = $.gtB(t1, 31) && $.ltB(t1, 128) && $.eqB($.CONSTANT1.indexOf$1($.CONSTANT13, t1), -1);
              if (!t1)
                throw $.$$throw($.HttpParserException$("Invalid header field name"));
              t1 = this._headerField;
              $.getInterceptor$JSArray(t1).add$1(t1, this._toLowerCase$1(byte$));
            }
            break;
          case 12:
            if ($.eqB(byte$, 13))
              this._state = 14;
            else if (!$.eqB(byte$, 32) && !$.eqB(byte$, 9)) {
              t1 = this._headerValue;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
              this._state = 13;
            }
            break;
          case 13:
            if ($.eqB(byte$, 13))
              this._state = 14;
            else {
              t1 = this._headerValue;
              $.getInterceptor$JSArray(t1).add$1(t1, byte$);
            }
            break;
          case 14:
            this._expect$2(byte$, 10);
            this._state = 15;
            break;
          case 15:
            if ($.eqB(byte$, 32) || $.eqB(byte$, 9))
              this._state = 12;
            else {
              headerField = $.String_String$fromCharCodes(this._headerField);
              headerValue = $.String_String$fromCharCodes(this._headerValue);
              reportHeader = true;
              if ($.eqB(headerField, "content-length") && this._chunked !== true)
                this._contentLength = $.parseInt(headerValue);
              else if ($.eqB(headerField, "connection")) {
                tokens = this._tokenizeFieldValue$1(headerValue);
                for (i0 = 0; t1 = i0, t2 = tokens, $.ltB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); i0 = $.add(i0, 1)) {
                  t1 = $.index(tokens, i0);
                  token = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
                  if ($.eqB(token, "keep-alive"))
                    this._persistentConnection = true;
                  else if ($.eqB(token, "close"))
                    this._persistentConnection = false;
                  else if ($.eqB(token, "upgrade"))
                    this._connectionUpgrade = true;
                  this._headers.add$2(headerField, token);
                }
                reportHeader = false;
              } else {
                if ($.eqB(headerField, "transfer-encoding")) {
                  t1 = headerValue;
                  t2 = $.eqB($.getInterceptor$JSString(t1).toLowerCase$0(t1), "chunked");
                  t1 = t2;
                } else
                  t1 = false;
                if (t1) {
                  this._chunked = true;
                  this._contentLength = -1;
                }
              }
              if (reportHeader === true)
                this._headers.add$2(headerField, headerValue);
              t1 = this._headerField;
              $.getInterceptor$JSArray(t1).clear$0(t1);
              t1 = this._headerValue;
              $.getInterceptor$JSArray(t1).clear$0(t1);
              if ($.eqB(byte$, 13))
                this._state = 16;
              else {
                t1 = this._headerField;
                $.getInterceptor$JSArray(t1).add$1(t1, this._toLowerCase$1(byte$));
                this._state = 11;
              }
            }
            break;
          case 16:
            this._expect$2(byte$, 10);
            if (this._messageType === 1 && $.ltB(this._contentLength, 0) && this._chunked === false)
              this._contentLength = 0;
            if (this._connectionUpgrade === true)
              this._state = 26;
            noBody = null;
            if (this._requestParser === true) {
              noBody = $.eq(this._contentLength, 0);
              this.requestStart$5($.String_String$fromCharCodes(this._method_or_status_code), $.String_String$fromCharCodes(this._uri_or_reason_phrase), this.get$version(), this._headers, noBody !== true);
            } else {
              noBody = $.eqB(this._contentLength, 0) || $.leB(this._statusCode, 199) || $.eqB(this._statusCode, 204) || $.eqB(this._statusCode, 304) || false;
              this.responseStart$5(this._statusCode, $.String_String$fromCharCodes(this._uri_or_reason_phrase), this.get$version(), this._headers, noBody !== true);
            }
            t1 = this._method_or_status_code;
            $.getInterceptor$JSArray(t1).clear$0(t1);
            t1 = this._uri_or_reason_phrase;
            $.getInterceptor$JSArray(t1).clear$0(t1);
            if ($.eqB(this._state, 27))
              break c$0;
            if (this._connectionUpgrade !== true)
              if (noBody === true) {
                this.dataEnd$1(this._messageType === 0 && this._persistentConnection !== true);
                this._reset$0();
              } else if (this._chunked === true) {
                this._state = 19;
                this._remainingContent = 0;
              } else if ($.gtB(this._contentLength, 0)) {
                this._remainingContent = this._contentLength;
                this._state = 24;
              } else
                this._state = 24;
            break;
          case 17:
            this._expect$2(byte$, 13);
            this._state = 18;
            break;
          case 18:
            this._expect$2(byte$, 10);
            this._state = 19;
            break;
          case 19:
            if ($.eqB(byte$, 13))
              this._state = 21;
            else if ($.eqB(byte$, 59))
              this._state = 20;
            else {
              value = this._expectHexDigit$1(byte$);
              this._remainingContent = $.add($.mul(this._remainingContent, 16), value);
            }
            break;
          case 20:
            if ($.eqB(byte$, 13))
              this._state = 21;
            break;
          case 21:
            this._expect$2(byte$, 10);
            if ($.gtB(this._remainingContent, 0))
              this._state = 24;
            else
              this._state = 22;
            break;
          case 22:
            this._expect$2(byte$, 13);
            this._state = 23;
            break;
          case 23:
            this._expect$2(byte$, 10);
            this.dataEnd$1(this._messageType === 0 && this._persistentConnection !== true);
            if ($.eqB(this._state, 27))
              break c$0;
            this._reset$0();
            break;
          case 24:
            this._index = $.sub(this._index, 1);
            dataAvailable = $.sub(this._lastIndex, this._index);
            data = null;
            t1 = this._remainingContent;
            if (t1 == null || $.leB(dataAvailable, t1)) {
              data = $.Uint8List_Uint8List(dataAvailable);
              t1 = data;
              $.getInterceptor$JSArray(t1).setRange$4(t1, 0, dataAvailable, this._liblib0$_buffer, this._index);
            } else {
              data = $.Uint8List_Uint8List(this._remainingContent);
              t1 = data;
              $.getInterceptor$JSArray(t1).setRange$4(t1, 0, this._remainingContent, this._liblib0$_buffer, this._index);
            }
            this.dataReceived$1(data);
            if ($.eqB(this._state, 27))
              break c$0;
            t1 = this._remainingContent;
            if (!(t1 == null)) {
              t2 = data;
              this._remainingContent = $.sub(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
            }
            t1 = this._index;
            t2 = data;
            this._index = $.add(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
            if ($.eqB(this._remainingContent, 0))
              if (this._chunked !== true) {
                this.dataEnd$1(this._messageType === 0 && this._persistentConnection !== true);
                if ($.eqB(this._state, 27))
                  break c$0;
                this._reset$0();
              } else
                this._state = 17;
            break;
          case 28:
            break;
          default:
            break;
        }
      }
    }
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    this._state = 28;
    this.error$1(e);
  }

  if (!$.eqB(this._state, 26)) {
    this._liblib0$_buffer = null;
    this._index = null;
    this._lastIndex = null;
  }
},
 streamData$1: function(buffer) {
  this._liblib0$_buffer = buffer;
  this._index = 0;
  this._lastIndex = $.getInterceptor$JSStringJSArray(buffer).get$length(buffer);
  this._parse$0();
},
 streamDone$0: function() {
  var t1 = new $._HttpParser_streamDone_type(this);
  if ($.eqB(this._state, 0)) {
    if (this._requestParser === true)
      this.closed$0();
    else
      this.error$1($.HttpParserException$("Connection closed before full " + $.S(t1.call$0()) + " header was received"));
    return;
  }
  if ($.ltB(this._state, 17)) {
    this._state = 28;
    this.error$1($.HttpParserException$("Connection closed before full " + $.S(t1.call$0()) + " header was received"));
    return;
  }
  if (this._chunked !== true && $.eqB(this._contentLength, -1)) {
    this.dataEnd$1(true);
    this._state = 25;
    this.closed$0();
  } else {
    this._state = 28;
    this.error$1($.HttpParserException$("Connection closed before full " + $.S(t1.call$0()) + " body was received"));
  }
},
 get$streamDone: function() {
  return new $.BoundClosure2(this, 'streamDone$0');
},
 streamError$1: function(e) {
  if (this._requestParser === true && $.eqB(this._state, 0)) {
    this.closed$0();
    return;
  }
  this.error$1(e);
},
 get$streamError: function() {
  return new $.BoundClosure(this, 'streamError$1');
},
 get$version: function() {
  switch (this._httpVersion) {
    case 1:
      return "1.0";
    case 2:
      return "1.1";
  }
  return;
},
 cancel$0: function() {
  this._state = 27;
},
 get$contentLength: function() {
  return this._contentLength;
},
 get$upgrade: function() {
  return this._connectionUpgrade === true && $.eqB(this._state, 26);
},
 get$persistentConnection: function() {
  return this._persistentConnection;
},
 _reset$0: function() {
  this._state = 0;
  this._messageType = 0;
  this._headerField = $.List_List(null);
  this._headerValue = $.List_List(null);
  this._method_or_status_code = $.List_List(null);
  this._uri_or_reason_phrase = $.List_List(null);
  this._httpVersion = 0;
  this._contentLength = -1;
  this._persistentConnection = false;
  this._connectionUpgrade = false;
  this._chunked = false;
  this._responseToMethod = null;
  this._remainingContent = null;
  this._headers = $._HttpHeaders$();
},
 _tokenizeFieldValue$1: function(headerValue) {
  var tokens, t1, start, index, t2, start0;
  if (typeof headerValue !== 'string' && (typeof headerValue !== 'object' || headerValue === null || headerValue.constructor !== Array && !headerValue.is$JavaScriptIndexingBehavior))
    return this._tokenizeFieldValue$1$bailout(1, headerValue);
  tokens = $.List_List(null);
  t1 = $.getInterceptor$JSStringJSArray(headerValue);
  start = 0;
  index = 0;
  while (true) {
    t2 = headerValue.length;
    if (!(index < t2))
      break;
    t2 = headerValue[index];
    if (typeof t2 !== 'string')
      return this._tokenizeFieldValue$1$bailout(3, headerValue, tokens, t2, start, index, t1);
    if (t2 === ",") {
      tokens.push(t1.substring$2(headerValue, start, index));
      start0 = index + 1;
      start = start0;
    } else {
      if (!(t2 === " "))
        t2 = t2 === "\t";
      else
        t2 = true;
      if (t2)
        ++start;
    }
    ++index;
  }
  tokens.push(t1.substring$2(headerValue, start, index));
  return tokens;
},
 _tokenizeFieldValue$1$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      headerValue = env0;
      break;
    case 2:
      t2 = env5;
      t1 = env4;
      index = env3;
      start = env2;
      tokens = env1;
      headerValue = env0;
      break;
    case 3:
      t1 = env5;
      index = env4;
      start = env3;
      t2 = env2;
      tokens = env1;
      headerValue = env0;
      break;
    case 4:
      t1 = env5;
      index = env4;
      start = env3;
      t2 = env2;
      tokens = env1;
      headerValue = env0;
      break;
    case 5:
      t2 = env5;
      t1 = env4;
      index = env3;
      start = env2;
      tokens = env1;
      headerValue = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      tokens = $.List_List(null);
      t1 = $.getInterceptor$JSStringJSArray(headerValue);
      start = 0;
      index = 0;
    default:
      var headerValue, tokens, t1, start, index, t2, start0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t2 = t1.get$length(headerValue);
            case 2:
              state0 = 0;
              if (!$.ltB(index, t2))
                break L0;
              t2 = $.index(headerValue, index);
            case 3:
              state0 = 0;
            default:
              if (state0 === 0 && $.eqB(t2, ",")) {
                tokens.push(t1.substring$2(headerValue, start, index));
                start0 = index + 1;
                start = start0;
              } else
                switch (state0) {
                  case 0:
                    t2 = $.index(headerValue, index);
                  case 4:
                    state0 = 0;
                  case 5:
                    if (state0 === 5 || state0 === 0 && !$.eqB(t2, " "))
                      switch (state0) {
                        case 0:
                          t2 = $.index(headerValue, index);
                        case 5:
                          state0 = 0;
                          t2 = $.eqB(t2, "\t");
                      }
                    else
                      t2 = true;
                    if (t2)
                      ++start;
                }
              ++index;
          }
      tokens.push(t1.substring$2(headerValue, start, index));
      return tokens;
  }
},
 _toLowerCase$1: function(byte$) {
  var aCode, zCode, t3, delta, t1;
  if (typeof byte$ !== 'number')
    return this._toLowerCase$1$bailout(1, byte$);
  aCode = $.CONSTANT0.charCodeAt$1("A", 0);
  if (typeof aCode !== 'number')
    return this._toLowerCase$1$bailout(2, byte$, aCode);
  zCode = $.CONSTANT0.charCodeAt$1("Z", 0);
  if (typeof zCode !== 'number')
    return this._toLowerCase$1$bailout(3, byte$, zCode, aCode);
  t3 = $.CONSTANT0.charCodeAt$1("a", 0);
  if (typeof t3 !== 'number')
    return this._toLowerCase$1$bailout(4, byte$, zCode, t3, aCode);
  delta = t3 - aCode;
  if (aCode <= byte$ && byte$ <= zCode)
    t1 = byte$ + delta;
  else
    t1 = byte$;
  return t1;
},
 _toLowerCase$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      byte$ = env0;
      break;
    case 2:
      aCode = env1;
      byte$ = env0;
      break;
    case 3:
      aCode = env2;
      zCode = env1;
      byte$ = env0;
      break;
    case 4:
      aCode = env3;
      t3 = env2;
      zCode = env1;
      byte$ = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      aCode = $.CONSTANT0.charCodeAt$1("A", 0);
    case 2:
      state0 = 0;
      zCode = $.CONSTANT0.charCodeAt$1("Z", 0);
    case 3:
      state0 = 0;
      t3 = $.CONSTANT0.charCodeAt$1("a", 0);
    case 4:
      var byte$, aCode, zCode, t3, delta;
      state0 = 0;
      delta = $.sub(t3, aCode);
      return $.leB(aCode, byte$) && $.leB(byte$, zCode) ? $.add(byte$, delta) : byte$;
  }
},
 _expect$2: function(val1, val2) {
  if (!$.eqB(val1, val2))
    throw $.$$throw($.HttpParserException$("Failed to parse HTTP"));
},
 _expectHexDigit$1: function(byte$) {
  if (typeof byte$ !== 'number')
    return this._expectHexDigit$1$bailout(1, byte$);
  if (48 <= byte$ && byte$ <= 57)
    return byte$ - 48;
  else if (65 <= byte$ && byte$ <= 70)
    return byte$ - 65 + 10;
  else if (97 <= byte$ && byte$ <= 102)
    return byte$ - 97 + 10;
  else
    throw $.$$throw($.HttpParserException$("Failed to parse HTTP"));
},
 _expectHexDigit$1$bailout: function(state0, byte$) {
  if ($.leB(48, byte$) && $.leB(byte$, 57))
    return $.sub(byte$, 48);
  else if ($.leB(65, byte$) && $.leB(byte$, 70))
    return $.add($.sub(byte$, 65), 10);
  else if ($.leB(97, byte$) && $.leB(byte$, 102))
    return $.add($.sub(byte$, 97), 10);
  else
    throw $.$$throw($.HttpParserException$("Failed to parse HTTP"));
},
 requestStart$5: function(arg0, arg1, arg2, arg3, arg4) {
  return this.requestStart.call$5(arg0, arg1, arg2, arg3, arg4);
},
 responseStart$5: function(arg0, arg1, arg2, arg3, arg4) {
  return this.responseStart.call$5(arg0, arg1, arg2, arg3, arg4);
},
 dataReceived$1: function(arg0) {
  return this.dataReceived.call$1(arg0);
},
 dataEnd$1: function(arg0) {
  return this.dataEnd.call$1(arg0);
},
 error$1: function(arg0) {
  return this.error.call$1(arg0);
},
 closed$0: function() {
  return this.closed.call$0();
},
 _HttpParser$requestParser$0: function() {
  this._requestParser = true;
  this._reset$0();
}
};

$$.HttpParserException = {"":"Object;message",
 toString$0: function() {
  return "HttpParserException: " + $.S(this.message);
},
 is$Exception: true
};

$$._HttpSessionManager = {"":"Object;_sessions,_sessionTimeout,_head,_tail,_timer",
 getSession$1: function(id) {
  return $.index(this._sessions, id);
},
 close$0: function() {
  var t1 = this._timer;
  if (!(t1 == null)) {
    t1.cancel$0();
    this._timer = null;
  }
}
};

$$.StreamException = {"":"Object;message",
 toString$0: function() {
  return "StreamException: " + $.S(this.message);
},
 is$Exception: true
};

$$.SocketIOException = {"":"Object;message,osError",
 toString$0: function() {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer("");
  t1 = $.getInterceptor$JSArray(sb);
  t1.add$1(sb, "SocketIOException");
  t2 = this.message;
  if ($.getInterceptor$JSStringJSArray(t2).get$isEmpty(t2) !== true) {
    t1.add$1(sb, ": " + $.S(t2));
    t2 = this.osError;
    if (!(t2 == null))
      t1.add$1(sb, " (" + $.S(t2) + ")");
  } else {
    t2 = this.osError;
    if (!(t2 == null))
      t1.add$1(sb, ": " + $.S(t2));
  }
  return t1.toString$0(sb);
},
 is$SocketIOException: true,
 is$Exception: true
};

$$._SocketOutputStream = {"":"_BaseOutputStream;_socket>,_pendingWrites,_onNoPendingWrites<,_onClosed=,_closing,_closed,_onError",
 write$2: function(buffer, copyBuffer) {
  return this._write$4(buffer, 0, $.getInterceptor$JSStringJSArray(buffer).get$length(buffer), copyBuffer);
},
 write$1: function(buffer) {
  return this.write$2(buffer, true);
},
 writeFrom$3: function(buffer, offset, len) {
  return this._write$4(buffer, offset, len == null ? $.sub($.getInterceptor$JSStringJSArray(buffer).get$length(buffer), offset) : len, true);
},
 close$0: function() {
  var t1, t2, t3;
  if (this._closing)
    return;
  this._closing = true;
  t1 = this._pendingWrites;
  t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) !== true;
  t3 = this._socket;
  if (t2)
    t3.set$_onWrite(this.get$_onWrite());
  else {
    t3._closeWrite$0();
    this._closed = true;
    $.Timer_Timer(0, new $._SocketOutputStream_close_anon(this));
  }
},
 destroy$0: function() {
  this._socket.set$onWrite(null);
  this._pendingWrites.clear$0();
  this._socket.close$0();
  this._closed = true;
},
 set$onNoPendingWrites: function(callback) {
  var t1;
  this._onNoPendingWrites = callback;
  if (!(this._onNoPendingWrites == null)) {
    t1 = this.get$_onWrite();
    this._socket.set$_onWrite(t1);
  }
},
 set$onClosed: function(callback) {
  this._onClosed = callback;
},
 _write$4: function(buffer, offset, len, copyBuffer) {
  var t1, bytesWritten, notWrittenOffset;
  if (this._closing || this._closed)
    throw $.$$throw($.StreamException$("Stream closed"));
  t1 = this._pendingWrites;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true) {
    bytesWritten = this._socket.writeList$3(buffer, offset, len);
    if ($.eqB(bytesWritten, len))
      return true;
  } else
    bytesWritten = 0;
  notWrittenOffset = $.add(offset, bytesWritten);
  if (copyBuffer === true)
    t1.add$1($.getInterceptor$JSArray(buffer).getRange$2(buffer, notWrittenOffset, $.sub(len, bytesWritten)));
  else
    t1.add$2(buffer, notWrittenOffset);
  t1 = this.get$_onWrite();
  this._socket.set$_onWrite(t1);
  return false;
},
 _onWrite$0: function(exception) {
  var t1, t2, buffer, offset, t3, bytesToWrite, bytesWritten, e;
  for (t1 = this._pendingWrites, t2 = $.getInterceptor$JSArray(t1); $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) !== true;) {
    buffer = t2.get$first(t1);
    offset = t1.get$index();
    t3 = buffer;
    bytesToWrite = $.sub($.getInterceptor$JSStringJSArray(t3).get$length(t3), offset);
    bytesWritten = null;
    try {
      bytesWritten = this._socket.writeList$3(buffer, offset, bytesToWrite);
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      t1.clear$0();
      this._onSocketError$1(e);
      return;
    }

    t1.removeBytes$1(bytesWritten);
    if ($.ltB(bytesWritten, bytesToWrite)) {
      t1 = this.get$_onWrite();
      this._socket.set$_onWrite(t1);
      return;
    }
  }
  if (this._closing) {
    this._socket._closeWrite$0();
    this._closed = true;
    if (!(this._onClosed == null))
      this._onClosed$0();
  } else if (!(this._onNoPendingWrites == null))
    this._onNoPendingWrites$0();
  t1 = this._onNoPendingWrites == null;
  t2 = this._socket;
  if (t1)
    t2.set$_onWrite(null);
  else
    t2.set$_onWrite(this.get$_onWrite());
},
 get$_onWrite: function() {
  return new $.BoundClosure2(this, '_onWrite$0');
},
 _onSocketError$1: function(e) {
  this.close$0();
  if (!(this._onError == null)) {
    this._onError$1(e);
    return true;
  } else
    return false;
},
 _onNoPendingWrites$0: function() {
  return this._onNoPendingWrites.call$0();
},
 _onClosed$0: function() {
  return this._onClosed.call$0();
}
};

$$._BaseDataInputStream = {"":"Object;_streamMarkedClosed<,_closeCallbackCalled<,_scheduledDataCallback<,_scheduledCloseCallback<,_clientDataHandler>,_clientCloseHandler>",
 read$1: function(len) {
  var bytesToRead;
  if (this._closeCallbackCalled === true || !(this._scheduledCloseCallback == null))
    return;
  bytesToRead = this.available$0();
  if ($.eqB(bytesToRead, 0)) {
    this._checkScheduleCallbacks$0();
    return;
  }
  if (!(len == null))
    if ($.leB(len, 0))
      throw $.$$throw($.StreamException$("Illegal length " + $.S(len)));
    else if ($.gtB(bytesToRead, len))
      bytesToRead = len;
  return this._read$1(bytesToRead);
},
 read$0: function() {
  return this.read$1(null);
},
 get$read: function() {
  return new $.BoundClosure4(this, 'read$1');
},
 close$0: function() {
  this._cancelScheduledDataCallback$0();
  this._close$0();
  this._checkScheduleCallbacks$0();
},
 set$onData: function(callback) {
  this._clientDataHandler = callback;
  this._checkScheduleCallbacks$0();
},
 set$onClosed: function(callback) {
  this._clientCloseHandler = callback;
  this._checkScheduleCallbacks$0();
},
 set$onError: function(callback) {
  this._clientErrorHandler = callback;
},
 _dataReceived$0: function() {
  this._cancelScheduledDataCallback$0();
  if (!(this._clientDataHandler == null))
    this._clientDataHandler$0();
  this._checkScheduleCallbacks$0();
},
 _closeReceived$0: function() {
  this._streamMarkedClosed = true;
  if ($.eqB(this.available$0(), 0)) {
    this._closeCallbackCalled = true;
    if (!(this._clientCloseHandler == null))
      this._clientCloseHandler$0();
  } else
    this._checkScheduleCallbacks$0();
},
 _cancelScheduledDataCallback$0: function() {
  var t1 = this._scheduledDataCallback;
  if (!(t1 == null)) {
    t1.cancel$0();
    this._scheduledDataCallback = null;
  }
},
 _checkScheduleCallbacks$0: function() {
  var t1, t2;
  t1 = new $._BaseDataInputStream__checkScheduleCallbacks_issueDataCallback(this);
  t2 = new $._BaseDataInputStream__checkScheduleCallbacks_issueCloseCallback(this);
  if (this._closeCallbackCalled !== true)
    if ($.gtB(this.available$0(), 0)) {
      if (this._scheduledDataCallback == null)
        this._scheduledDataCallback = $.Timer_Timer(0, t1);
    } else if (this._streamMarkedClosed === true && this._scheduledCloseCallback == null) {
      this._cancelScheduledDataCallback$0();
      this._close$0();
      this._scheduledCloseCallback = $.Timer_Timer(0, t2);
    }
},
 _clientDataHandler$0: function() {
  return this._clientDataHandler.call$0();
},
 _clientCloseHandler$0: function() {
  return this._clientCloseHandler.call$0();
}
};

$$._BaseOutputStream = {"":"Object;_onError>",
 set$onError: function(callback) {
  this._onError = callback;
},
 _onError$1: function(arg0) {
  return this._onError.call$1(arg0);
}
};

$$._SecureSocket = {"":"Object;socket,host,is_server,certificateName,requestClientCertificate,requireClientCertificate,sendClientCertificate,_status,_socketClosedRead,_socketClosedWrite,_closedRead,_closedWrite,_filterReadEmpty,_filterWriteEmpty,_inputStream,_outputStream>,_connectPending,_socketConnectHandler,_socketWriteHandler,_socketDataHandler,_socketErrorHandler,_socketCloseHandler,scheduledDataEvent,secureFilter",
 _verifyFields$0: function() {
  var t1, t2;
  t1 = this.host;
  if (!(typeof t1 === 'string'))
    throw $.$$throw($.ArgumentError$("SecureSocket constructor: host is not a String"));
  t1 = this.certificateName;
  t2 = t1 == null;
  if (!t2 && !(typeof t1 === 'string'))
    throw $.$$throw($.ArgumentError$("SecureSocket constructor: certificateName is not null or a String"));
  if (t2 && this.is_server === true)
    throw $.$$throw($.ArgumentError$("SecureSocket constructor: certificateName is null on a server"));
  t1 = this.requestClientCertificate;
  if (!(typeof t1 === 'boolean'))
    throw $.$$throw($.ArgumentError$("SecureSocket constructor: requestClientCertificate is not a bool"));
  t1 = this.requireClientCertificate;
  if (!(typeof t1 === 'boolean'))
    throw $.$$throw($.ArgumentError$("SecureSocket constructor: requireClientCertificate is not a bool"));
  t1 = this.sendClientCertificate;
  if (!(typeof t1 === 'boolean'))
    throw $.$$throw($.ArgumentError$("SecureSocket constructor: sendClientCertificate is not a bool"));
},
 get$port: function() {
  return this.socket.get$port();
},
 get$remoteHost: function() {
  return this.socket.get$remoteHost();
},
 get$remotePort: function() {
  return this.socket.get$remotePort();
},
 set$onClosed: function(callback) {
  if (!(this._inputStream == null) && !(callback == null))
    throw $.$$throw($.StreamException$("Cannot set close handler when input stream is used"));
  this.set$_onClosed(callback);
},
 set$_onClosed: function(callback) {
  this._socketCloseHandler = callback;
},
 set$onConnect: function(callback) {
  var t1 = this._status;
  if (t1 === 202 || t1 === 203)
    throw $.$$throw($.StreamException$("Cannot set connect handler when already connected"));
  this.set$_onConnect(callback);
},
 set$_onConnect: function(callback) {
  this._socketConnectHandler = callback;
},
 set$onData: function(callback) {
  if (!(this._inputStream == null) && !(callback == null))
    throw $.$$throw($.StreamException$("Cannot set data handler when input stream is used"));
  this.set$_onData(callback);
},
 set$_onData: function(callback) {
  this._socketDataHandler = callback;
},
 set$onError: function(callback) {
  this._socketErrorHandler = callback;
},
 set$onWrite: function(callback) {
  if (!(this._outputStream == null) && !(callback == null))
    throw $.$$throw($.StreamException$("Cannot set write handler when output stream is used"));
  this.set$_onWrite(callback);
},
 set$_onWrite: function(callback) {
  var t1;
  this._socketWriteHandler = callback;
  t1 = this.get$_secureWriteHandler();
  this.socket.set$onWrite(t1);
},
 get$outputStream: function() {
  if (this._outputStream == null) {
    if (!(this._socketWriteHandler == null))
      throw $.$$throw($.StreamException$("Cannot get output stream when socket write handler is used"));
    this._outputStream = $._SocketOutputStream$(this);
  }
  return this._outputStream;
},
 close$1: function(halfClose) {
  var t1;
  if (this._status === 203)
    return;
  if (halfClose === true) {
    this._closedWrite = true;
    this._writeEncryptedData$0();
    if (this._filterWriteEmpty) {
      this.socket.close$1(true);
      this._socketClosedWrite = true;
      if (this._closedRead)
        this.close$1(false);
    }
  } else {
    this._closedWrite = true;
    this._closedRead = true;
    this.socket.close$1(false);
    this._socketClosedWrite = true;
    this._socketClosedRead = true;
    this.secureFilter.destroy$0();
    this.secureFilter = null;
    t1 = this.scheduledDataEvent;
    if (!(t1 == null))
      t1.cancel$0();
    this._status = 203;
  }
},
 close$0: function() {
  return this.close$1(false);
},
 _closeWrite$0: function() {
  return this.close$1(true);
},
 read$1: function(len) {
  var buffer, toRead, t1, result;
  if (this._closedRead)
    throw $.$$throw($.SocketIOException$("Reading from a closed socket", null));
  if (this._status !== 202)
    return $.List_List(0);
  buffer = $.index(this.secureFilter.get$buffers(), 0);
  this._readEncryptedData$0();
  toRead = $.getInterceptor$JSStringJSArray(buffer).get$length(buffer);
  if (!(len == null)) {
    if (!(typeof len === 'number' && Math.floor(len) === len) || len < 0)
      throw $.$$throw($.ArgumentError$("Invalid len parameter in SecureSocket.read (len: " + $.S(len) + ")"));
    if ($.ltB(len, toRead))
      toRead = len;
  }
  t1 = buffer.get$data();
  result = $.getInterceptor$JSArray(t1).getRange$2(t1, buffer.get$start(), toRead);
  buffer.advanceStart$1(toRead);
  this._setHandlersAfterRead$0();
  return result;
},
 read$0: function() {
  return this.read$1(null);
},
 get$read: function() {
  return new $.BoundClosure5(this, 'read$1');
},
 readList$3: function(data, offset, bytes) {
  var t1, t2, buffer, toRead, bytesRead;
  if (typeof offset !== 'number')
    return this.readList$3$bailout(1, data, offset, bytes);
  if (typeof bytes !== 'number')
    return this.readList$3$bailout(1, data, offset, bytes);
  if (this._closedRead)
    throw $.$$throw($.SocketIOException$("Reading from a closed socket", null));
  if (!(offset < 0))
    if (!(bytes < 0)) {
      t1 = offset + bytes;
      t2 = $.getInterceptor$JSStringJSArray(data).get$length(data);
      if (typeof t2 !== 'number')
        return this.readList$3$bailout(2, data, offset, bytes, t1, t2);
      t2 = t1 > t2;
      t1 = t2;
    } else
      t1 = true;
  else
    t1 = true;
  if (t1)
    throw $.$$throw($.ArgumentError$("Invalid offset or bytes in SecureSocket.readList"));
  t1 = this._status;
  if (t1 !== 202 && t1 !== 203)
    return 0;
  t1 = this.secureFilter.get$buffers();
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior))
    return this.readList$3$bailout(3, data, offset, t1, bytes);
  if (0 >= t1.length)
    throw $.ioore(0);
  buffer = t1[0];
  if (bytes > 0) {
    this._readEncryptedData$0();
    t1 = $.getInterceptor$JSStringJSArray(buffer);
    t2 = t1.get$length(buffer);
    if (typeof t2 !== 'number')
      return this.readList$3$bailout(4, data, offset, buffer, bytes, t1, t2);
    if (t2 > 0) {
      toRead = $.min(bytes - 0, t1.get$length(buffer));
      $.getInterceptor$JSArray(data).setRange$4(data, offset, toRead, buffer.get$data(), buffer.get$start());
      buffer.advanceStart$1(toRead);
      bytesRead = 0 + toRead;
    } else
      bytesRead = 0;
  } else
    bytesRead = 0;
  this._setHandlersAfterRead$0();
  return bytesRead;
},
 readList$3$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      bytes = env2;
      offset = env1;
      data = env0;
      break;
    case 2:
      t2 = env4;
      t1 = env3;
      bytes = env2;
      offset = env1;
      data = env0;
      break;
    case 3:
      bytes = env3;
      t1 = env2;
      offset = env1;
      data = env0;
      break;
    case 4:
      t2 = env5;
      t1 = env4;
      bytes = env3;
      buffer = env2;
      offset = env1;
      data = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (this._closedRead)
        throw $.$$throw($.SocketIOException$("Reading from a closed socket", null));
    case 2:
      if (state0 === 2 || state0 === 0 && !$.ltB(offset, 0))
        switch (state0) {
          case 0:
          case 2:
            if (state0 === 2 || state0 === 0 && !$.ltB(bytes, 0))
              switch (state0) {
                case 0:
                  t1 = $.add(offset, bytes);
                  t2 = $.getInterceptor$JSStringJSArray(data).get$length(data);
                case 2:
                  state0 = 0;
                  t2 = $.gtB(t1, t2);
                  t1 = t2;
              }
            else
              t1 = true;
        }
      else
        t1 = true;
      if (t1)
        throw $.$$throw($.ArgumentError$("Invalid offset or bytes in SecureSocket.readList"));
      t1 = this._status;
      if (t1 !== 202 && t1 !== 203)
        return 0;
      t1 = this.secureFilter.get$buffers();
    case 3:
      state0 = 0;
      buffer = $.index(t1, 0);
    case 4:
      var bytes, offset, data, t1, t2, buffer, toRead, bytesRead;
      if (state0 === 4 || state0 === 0 && $.gtB(bytes, 0))
        switch (state0) {
          case 0:
            this._readEncryptedData$0();
            t1 = $.getInterceptor$JSStringJSArray(buffer);
            t2 = t1.get$length(buffer);
          case 4:
            state0 = 0;
            if ($.gtB(t2, 0)) {
              toRead = $.min($.sub(bytes, 0), t1.get$length(buffer));
              $.getInterceptor$JSArray(data).setRange$4(data, offset, toRead, buffer.get$data(), buffer.get$start());
              buffer.advanceStart$1(toRead);
              bytesRead = 0 + toRead;
              $.add(offset, toRead);
            } else
              bytesRead = 0;
        }
      else
        bytesRead = 0;
      this._setHandlersAfterRead$0();
      return bytesRead;
  }
},
 writeList$3: function(data, offset, bytes) {
  var t1, buffer, t2, t3, t5, t6;
  if (typeof bytes !== 'number')
    return this.writeList$3$bailout(1, data, offset, bytes);
  if (this._closedWrite)
    throw $.$$throw($.SocketIOException$("Writing to a closed socket", null));
  if (this._status !== 202)
    return 0;
  t1 = this.secureFilter.get$buffers();
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior))
    return this.writeList$3$bailout(2, data, offset, bytes, t1);
  if (1 >= t1.length)
    throw $.ioore(1);
  buffer = t1[1];
  t1 = buffer.get$free();
  if (typeof t1 !== 'number')
    return this.writeList$3$bailout(3, data, offset, bytes, t1, buffer);
  if (bytes > t1)
    bytes = t1;
  if (bytes > 0) {
    t1 = buffer.get$data();
    t2 = $.getInterceptor$JSArray(t1);
    t3 = buffer.get$start();
    if (typeof t3 !== 'number')
      return this.writeList$3$bailout(5, t2, data, offset, t3, t1, bytes, buffer);
    t5 = $.getInterceptor$JSStringJSArray(buffer);
    t6 = t5.get$length(buffer);
    if (typeof t6 !== 'number')
      return this.writeList$3$bailout(6, t2, data, t5, t6, offset, t1, t3, bytes, buffer);
    t2.setRange$4(t1, t3 + t6, bytes, data, offset);
    t1 = t5.get$length(buffer);
    if (typeof t1 !== 'number')
      return this.writeList$3$bailout(7, t1, bytes, t5, buffer);
    t5.set$length(buffer, t1 + bytes);
  }
  this._writeEncryptedData$0();
  return bytes;
},
 writeList$3$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      bytes = env2;
      offset = env1;
      data = env0;
      break;
    case 2:
      t1 = env3;
      bytes = env2;
      offset = env1;
      data = env0;
      break;
    case 3:
      buffer = env4;
      t1 = env3;
      bytes = env2;
      offset = env1;
      data = env0;
      break;
    case 4:
      buffer = env3;
      bytes = env2;
      offset = env1;
      data = env0;
      break;
    case 5:
      buffer = env6;
      bytes = env5;
      t1 = env4;
      t3 = env3;
      offset = env2;
      data = env1;
      t2 = env0;
      break;
    case 6:
      buffer = env8;
      bytes = env7;
      t3 = env6;
      t1 = env5;
      offset = env4;
      t6 = env3;
      t5 = env2;
      data = env1;
      t2 = env0;
      break;
    case 7:
      buffer = env3;
      t5 = env2;
      bytes = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (this._closedWrite)
        throw $.$$throw($.SocketIOException$("Writing to a closed socket", null));
      if (this._status !== 202)
        return 0;
      t1 = this.secureFilter.get$buffers();
    case 2:
      state0 = 0;
      buffer = $.index(t1, 1);
      t1 = buffer.get$free();
    case 3:
      state0 = 0;
    case 4:
      if (state0 === 4 || state0 === 0 && $.gtB(bytes, t1))
        switch (state0) {
          case 0:
            bytes = buffer.get$free();
          case 4:
            state0 = 0;
        }
    default:
      var bytes, offset, data, t1, buffer, t2, t3, t5, t6;
      if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.gtB(bytes, 0))
        switch (state0) {
          case 0:
            t1 = buffer.get$data();
            t2 = $.getInterceptor$JSArray(t1);
            t3 = buffer.get$start();
          case 5:
            state0 = 0;
            t5 = $.getInterceptor$JSStringJSArray(buffer);
            t6 = t5.get$length(buffer);
          case 6:
            state0 = 0;
            t2.setRange$4(t1, $.add(t3, t6), bytes, data, offset);
            t1 = t5.get$length(buffer);
          case 7:
            state0 = 0;
            t5.set$length(buffer, $.add(t1, bytes));
        }
      this._writeEncryptedData$0();
      return bytes;
  }
},
 _secureConnectHandler$0: function() {
  var t1, t2, t3, t4, t5, t6;
  this._connectPending = true;
  t1 = this.secureFilter;
  t2 = this.host;
  t3 = this.get$port();
  t4 = this.is_server;
  t5 = this.certificateName;
  t6 = this.requestClientCertificate === true || this.requireClientCertificate === true;
  t1.connect$7(t2, t3, t4, t5, t6, this.requireClientCertificate, this.sendClientCertificate);
  this._status = 201;
  this._secureHandshake$0();
},
 get$_secureConnectHandler: function() {
  return new $.BoundClosure2(this, '_secureConnectHandler$0');
},
 _secureWriteHandler$0: function() {
  var t1, handler;
  this._writeEncryptedData$0();
  if (this._filterWriteEmpty && this._closedWrite && !this._socketClosedWrite)
    this.close$1(true);
  t1 = this._status;
  if (t1 === 201)
    this._secureHandshake$0();
  else if (t1 === 202 && !(this._socketWriteHandler == null) && $.gtB($.index(this.secureFilter.get$buffers(), 1).get$free(), 0)) {
    handler = this._socketWriteHandler;
    this._socketWriteHandler = null;
    handler.call$0();
  }
},
 get$_secureWriteHandler: function() {
  return new $.BoundClosure2(this, '_secureWriteHandler$0');
},
 _secureDataHandler$0: function(exception, exception) {
  var t1, e, e0;
  if (this._status === 201)
    try {
      this._secureHandshake$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      this._reportError$2(e, "SecureSocket error");
    }

  else {
    try {
      this._writeEncryptedData$0();
      this._readEncryptedData$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      this._reportError$2(e0, "SecureSocket error");
    }

    if (this._filterReadEmpty !== true) {
      t1 = this.scheduledDataEvent;
      if (!(t1 == null)) {
        t1.cancel$0();
        this.scheduledDataEvent = null;
      }
      if (!(this._socketDataHandler == null))
        this._socketDataHandler$0();
    } else if (this._socketClosedRead)
      this._secureCloseHandler$0();
  }
},
 get$_secureDataHandler: function() {
  return new $.BoundClosure2(this, '_secureDataHandler$0');
},
 _secureErrorHandler$1: function(e) {
  this._reportError$2(e, "Error on underlying Socket");
},
 get$_secureErrorHandler: function() {
  return new $.BoundClosure(this, '_secureErrorHandler$1');
},
 _reportError$2: function(error, message) {
  var e, reported, t1;
  if (typeof error === 'object' && error !== null && !!error.is$SocketIOException)
    e = $.SocketIOException$(message + " (" + $.S(error.message) + ")", error.osError);
  else
    e = typeof error === 'object' && error !== null && !!error.is$OSError ? $.SocketIOException$(message, error) : $.SocketIOException$(message + " (" + $.S($.getInterceptor(error).toString$0(error)) + ")", null);
  this.close$1(false);
  if (!(this._socketErrorHandler == null)) {
    this._socketErrorHandler$1(e);
    reported = true;
  } else
    reported = false;
  t1 = this._inputStream;
  if (!(t1 == null))
    reported = reported || t1._onSocketError$1(e) === true;
  t1 = this._outputStream;
  if (!(t1 == null))
    reported = reported || t1._onSocketError$1(e) === true;
  if (!reported)
    throw $.$$throw(e);
},
 _secureCloseHandler$0: function() {
  if (this._closedRead)
    return;
  this._socketClosedRead = true;
  if (this._filterReadEmpty === true) {
    this._closedRead = true;
    var t1 = this.scheduledDataEvent;
    if (!(t1 == null))
      t1.cancel$0();
    if (!(this._socketCloseHandler == null))
      this._socketCloseHandler$0();
    if (this._socketClosedWrite)
      this.close$1(false);
  }
},
 get$_secureCloseHandler: function() {
  return new $.BoundClosure2(this, '_secureCloseHandler$0');
},
 _secureHandshake$0: function() {
  this._readEncryptedData$0();
  this.secureFilter.handshake$0();
  this._writeEncryptedData$0();
  var t1 = $.index(this.secureFilter.get$buffers(), 3);
  if ($.gtB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
    t1 = this.get$_secureWriteHandler();
    this.socket.set$onWrite(t1);
  }
},
 _secureHandshakeCompleteHandler$0: function() {
  this._status = 202;
  if (this._connectPending && !(this._socketConnectHandler == null)) {
    this._connectPending = false;
    this._socketConnectHandler$0();
  }
  if (!(this._socketWriteHandler == null)) {
    var t1 = this.get$_secureWriteHandler();
    this.socket.set$onWrite(t1);
  }
},
 get$_secureHandshakeCompleteHandler: function() {
  return new $.BoundClosure2(this, '_secureHandshakeCompleteHandler$0');
},
 _readEncryptedData$0: function() {
  var encrypted, plaintext, t1, t2, progress, bytes;
  encrypted = $.index(this.secureFilter.get$buffers(), 2);
  plaintext = $.index(this.secureFilter.get$buffers(), 0);
  for (t1 = $.getInterceptor$JSStringJSArray(encrypted), t2 = $.getInterceptor$JSStringJSArray(plaintext), progress = true; progress;) {
    if (this._status === 202 && $.gtB(plaintext.get$free(), 0)) {
      bytes = this.secureFilter.processBuffer$1(0);
      if ($.gtB(bytes, 0)) {
        t2.set$length(plaintext, $.add(t2.get$length(plaintext), bytes));
        progress = true;
      } else
        progress = false;
    } else
      progress = false;
    if ($.gtB(t1.get$length(encrypted), 0)) {
      bytes = this.secureFilter.processBuffer$1(2);
      if ($.gtB(bytes, 0)) {
        encrypted.advanceStart$1(bytes);
        progress = true;
      }
    }
    if (!this._socketClosedRead) {
      bytes = this.socket.readList$3(encrypted.get$data(), $.add(encrypted.get$start(), t1.get$length(encrypted)), encrypted.get$free());
      if ($.gtB(bytes, 0)) {
        t1.set$length(encrypted, $.add(t1.get$length(encrypted), bytes));
        progress = true;
      }
    }
  }
  this._filterReadEmpty = $.eq(t2.get$length(plaintext), 0);
},
 _writeEncryptedData$0: function() {
  var encrypted, t1, bytes, plaintext;
  if (this._socketClosedWrite)
    return;
  encrypted = $.index(this.secureFilter.get$buffers(), 3);
  $.index(this.secureFilter.get$buffers(), 1);
  for (t1 = $.getInterceptor$JSStringJSArray(encrypted); true;)
    if ($.gtB(t1.get$length(encrypted), 0)) {
      bytes = this.socket.writeList$3(encrypted.get$data(), encrypted.get$start(), t1.get$length(encrypted));
      if ($.eqB(bytes, 0)) {
        t1 = this.get$_secureWriteHandler();
        this.socket.set$onWrite(t1);
        this._filterWriteEmpty = false;
        break;
      }
      encrypted.advanceStart$1(bytes);
    } else {
      plaintext = $.index(this.secureFilter.get$buffers(), 1);
      if ($.gtB($.getInterceptor$JSStringJSArray(plaintext).get$length(plaintext), 0))
        plaintext.advanceStart$1(this.secureFilter.processBuffer$1(1));
      bytes = this.secureFilter.processBuffer$1(3);
      if ($.leB(bytes, 0)) {
        this._filterWriteEmpty = true;
        break;
      }
      t1.set$length(encrypted, $.add(t1.get$length(encrypted), bytes));
    }
},
 _setHandlersAfterRead$0: function() {
  if (this._filterReadEmpty === true) {
    var t1 = this.scheduledDataEvent;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.scheduledDataEvent = null;
    }
  } else if (this.scheduledDataEvent == null)
    this.scheduledDataEvent = $.Timer_Timer(0, new $._SecureSocket__setHandlersAfterRead_anon(this));
  if (this._socketClosedRead) {
    if (this._filterReadEmpty !== true)
      this._readEncryptedData$0();
    if (this._filterReadEmpty === true)
      $.Timer_Timer(0, new $._SecureSocket__setHandlersAfterRead_anon0(this));
  }
},
 _socketConnectHandler$0: function() {
  return this._socketConnectHandler.call$0();
},
 _socketDataHandler$0: function() {
  return this._socketDataHandler.call$0();
},
 _socketErrorHandler$1: function(arg0) {
  return this._socketErrorHandler.call$1(arg0);
},
 _socketCloseHandler$0: function() {
  return this._socketCloseHandler.call$0();
},
 _SecureSocket$8$is_server$requestClientCertificate$requireClientCertificate$sendClientCertificate$socket: function(host, requestedPort, certificateName, is_server, requestClientCertificate, requireClientCertificate, sendClientCertificate, socket) {
  var t1;
  this._verifyFields$0();
  if (this.socket == null)
    this.socket = $.Socket_Socket(this.host, requestedPort);
  t1 = this.get$_secureConnectHandler();
  this.socket.set$onConnect(t1);
  t1 = this.get$_secureDataHandler();
  this.socket.set$onData(t1);
  t1 = this.get$_secureCloseHandler();
  this.socket.set$onClosed(t1);
  t1 = this.get$_secureErrorHandler();
  this.socket.set$onError(t1);
  this.secureFilter.init$0();
  this.secureFilter.registerHandshakeCompleteCallback$1(this.get$_secureHandshakeCompleteHandler());
}
};

$$._SecureServerSocket = {"":"Object;socket,_onConnectionCallback,certificate_name,requestClientCertificate,requireClientCertificate",
 set$onConnection: function(callback) {
  this._onConnectionCallback = callback;
},
 set$onError: function(callback) {
  this.socket.set$onError(callback);
},
 get$port: function() {
  return this.socket.get$port();
},
 close$0: function() {
  this.socket.close$0();
},
 _onConnectionHandler$1: function(connection) {
  var t1;
  if (this._onConnectionCallback == null) {
    connection.close$0();
    throw $.$$throw($.SocketIOException$("SecureServerSocket with no onConnection callback connected to", null));
  }
  t1 = this.certificate_name;
  if (t1 == null) {
    connection.close$0();
    throw $.$$throw($.SocketIOException$("SecureServerSocket with server certificate not set connected to", null));
  }
  this._onConnectionCallback$1($._SecureSocket$(connection.get$remoteHost(), connection.get$remotePort(), t1, true, this.requestClientCertificate, this.requireClientCertificate, false, connection));
},
 get$_onConnectionHandler: function() {
  return new $.BoundClosure(this, '_onConnectionHandler$1');
},
 _onConnectionCallback$1: function(arg0) {
  return this._onConnectionCallback.call$1(arg0);
},
 _SecureServerSocket$6: function(bindAddress, port, backlog, certificate_name, requestClientCertificate, requireClientCertificate) {
  var t1;
  this.socket = $.ServerSocket_ServerSocket(bindAddress, port, backlog);
  t1 = this.get$_onConnectionHandler();
  this.socket.set$onConnection(t1);
},
 is$SecureServerSocket: true
};

$$._Manager = {"":"Object;nextIsolateId=,currentManagerId>,nextManagerId,currentContext=,rootContext=,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"":"Object;id>,ports>,isolateStatics",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"":"Object;events",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor$JSArray(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$, t1, t2;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null))
        if ($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true)
          if ($._globalState().get$fromCommandLine() === true) {
            t1 = $._globalState().get$rootContext().get$ports();
            t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"":"Object;isolate,fn,message",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":"Object;",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"":"Object;_isolateId>",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"":"_BaseSendPort;_receivePort>,_isolateId",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"":"_BaseSendPort;_workerId>,_receivePortId,_isolateId",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(replyTo, this, message));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"":"Object;_id>,_callback>",
 _callback$2: function(arg0, arg1) {
  return this._callback.call$2(arg0, arg1);
},
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"":"_MessageTraverser;ports>,_visited",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.getInterceptor$JSArray(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  t1 = map.get$values();
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._liblib2$_port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"":"_Serializer;_nextFreeRefId,_visited",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ["sendport", x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ["sendport", $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib2$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"":"_Copier;_visited",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib2$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"":"_Deserializer;_deserialized",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":"Object;tagged",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor$JSArray(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $.List_List(null);
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"":"Object;",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"":"Object;",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || !!x.is$List))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$Map)
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Copier = {"":"_MessageTraverser;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior)
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $.List_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      copy = $.index(this._visited, list);
      if (!(copy == null))
        return copy;
      len = $.getInterceptor$JSStringJSArray(list).get$length(list);
    case 2:
      var list, copy, len, i, t1;
      state0 = 0;
      copy = $.List_List(len);
      $.indexSet(this._visited, list, copy);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
  }
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_0 = $.index(this._visited, map);
  t2 = t1.copy_0;
  if (!(t2 == null))
    return t2;
  t1.copy_0 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_0);
  map.forEach$1(new $._Copier_visitMap_anon(t1, this));
  return t1.copy_0;
}
};

$$._Serializer = {"":"_MessageTraverser;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ["list", id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ["map", id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $.List_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      len = $.getInterceptor$JSStringJSArray(list).get$length(list);
    case 2:
      var list, len, result, i, t1;
      state0 = 0;
      result = $.List_List(len);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t1;
      }
      return result;
  }
}
};

$$._Deserializer = {"":"Object;",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case "ref":
      return this._deserializeRef$1(x);
    case "list":
      return this._deserializeList$1(x);
    case "map":
      return this._deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior)
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      id = $.index(x, 1);
      dartList = $.index(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._deserialized, id, dartList);
      len = $.getInterceptor$JSStringJSArray(dartList).get$length(dartList);
    case 2:
      var id, dartList, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
      return dartList;
  }
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env3;
      result = env2;
      len = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      state0 = 0;
      len = $.getInterceptor$JSStringJSArray(keys).get$length(keys);
    case 3:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$._Timer = {"":"Object;_once,_handle",
 cancel$0: function() {
  var t1, t2;
  t1 = this._once;
  t2 = $._window;
  if (t1)
    t2().clearTimeout$1(this._handle);
  else
    t2().clearInterval$1(this._handle);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon0(callback, this), milliSeconds);
}
};

$$._ListRange = {"":"Object;_source,_offset,_liblib1$_length",
 iterator$0: function() {
  var t1, t2;
  t1 = this._source;
  t2 = this._offset;
  return $._ListRangeIteratorImpl$(t1, t2, $.add(t2, this._liblib1$_length));
},
 get$length: function() {
  return this._liblib1$_length;
},
 _ListRange$3: function(source, offset, length$) {
  var t1, t2, t3, t4;
  t1 = this._offset;
  if (!$.ltB(t1, 0)) {
    t2 = this._source;
    t3 = $.gtB(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
    t2 = t3;
  } else
    t2 = true;
  if (t2)
    throw $.$$throw($.RangeError$value(t1));
  t2 = this._liblib1$_length;
  if (!(t2 == null) && $.ltB(t2, 0))
    throw $.$$throw($.RangeError$value(t2));
  t3 = $.add(t2, t1);
  t4 = this._source;
  if ($.gtB(t3, $.getInterceptor$JSStringJSArray(t4).get$length(t4)))
    throw $.$$throw($.RangeError$value($.add(t2, t1)));
}
};

$$._ListRangeIteratorImpl = {"":"Object;_source,_offset,_end",
 get$hasNext: function() {
  return $.lt(this._offset, this._end);
},
 next$0: function() {
  var t1, t2;
  t1 = this._source;
  t2 = this._offset;
  this._offset = $.add(t2, 1);
  return $.index(t1, t2);
},
 get$position: function() {
  return this._offset;
},
 backup$1: function(by) {
  this._offset = $.sub(this._offset, by);
},
 backup$0: function() {
  return this.backup$1(1);
},
 get$remaining: function() {
  return $.sub(this._end, this._offset);
}
};

$$.Utf8Decoder = {"":"Object;utf8EncodedBytesIterator,replacementCodepoint",
 decodeRest$0: function() {
  var codepoints, i, i0, t1, truncCodepoints;
  codepoints = $.List_List(this.utf8EncodedBytesIterator.get$remaining());
  for (i = 0; this.get$hasNext() === true; i = i0) {
    i0 = i + 1;
    t1 = this.next$0();
    if (i >= codepoints.length)
      throw $.ioore(i);
    codepoints[i] = t1;
  }
  if (i === codepoints.length)
    return codepoints;
  else {
    truncCodepoints = $.List_List(i);
    $.CONSTANT1.setRange$3(truncCodepoints, 0, i, codepoints);
    return truncCodepoints;
  }
},
 get$hasNext: function() {
  return this.utf8EncodedBytesIterator.get$hasNext();
},
 next$0: function() {
  var t1, value, t2, additionalBytes, j, nextValue, value0, validSequence, nonOverlong, inRange;
  t1 = this.utf8EncodedBytesIterator;
  value = t1.next$0();
  if (value !== (value | 0))
    return this.next$0$bailout1(1, t1, value);
  if (value < 0) {
    t2 = this.replacementCodepoint;
    if (!(t2 == null))
      return t2;
    else
      throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1.get$position())));
  } else if (value <= 127)
    return value;
  else if (value < 192) {
    t2 = this.replacementCodepoint;
    if (!(t2 == null))
      return t2;
    else
      throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1.get$position())));
  } else if (value < 224) {
    value -= 192;
    additionalBytes = 1;
  } else if (value < 240) {
    value -= 224;
    additionalBytes = 2;
  } else if (value < 248) {
    value -= 240;
    additionalBytes = 3;
  } else if (value < 252) {
    value -= 248;
    additionalBytes = 4;
  } else {
    if (value < 254)
      value -= 252;
    else {
      t2 = this.replacementCodepoint;
      if (!(t2 == null))
        return t2;
      else
        throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1.get$position())));
    }
    additionalBytes = 5;
  }
  j = 0;
  while (true) {
    if (!(j < additionalBytes && t1.get$hasNext() === true))
      break;
    nextValue = t1.next$0();
    if (nextValue !== (nextValue | 0))
      return this.next$0$bailout1(2, j, value, nextValue, t1, additionalBytes);
    if (nextValue > 127 && nextValue < 192)
      value0 = (value << 6 | nextValue & 63) >>> 0;
    else {
      if (nextValue >= 192)
        t1.backup$0();
      break;
    }
    ++j;
    value = value0;
  }
  if (j === additionalBytes)
    validSequence = value < 55296 || value > 57343;
  else
    validSequence = false;
  if (!(additionalBytes === 1 && value > 127))
    if (!(additionalBytes === 2 && value > 2047)) {
      t2 = additionalBytes === 3 && value > 65535;
      nonOverlong = t2;
    } else
      nonOverlong = true;
  else
    nonOverlong = true;
  inRange = value <= 1114111;
  if (validSequence && nonOverlong && inRange)
    return value;
  else {
    t2 = this.replacementCodepoint;
    if (!(t2 == null))
      return t2;
    else {
      t1 = t1.get$position();
      if (typeof t1 !== 'number')
        return this.next$0$bailout1(3, j, t1);
      throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1 - j)));
    }
  }
},
 next$0$bailout1: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      value = env1;
      t1 = env0;
      break;
    case 2:
      additionalBytes = env4;
      t1 = env3;
      nextValue = env2;
      value = env1;
      j = env0;
      break;
    case 3:
      t1 = env1;
      j = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.utf8EncodedBytesIterator;
      value = t1.next$0();
    case 1:
      state0 = 0;
      if ($.ltB(value, 0)) {
        t2 = this.replacementCodepoint;
        if (!(t2 == null))
          return t2;
        else
          throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1.get$position())));
      } else if ($.leB(value, 127))
        return value;
      else if ($.ltB(value, 192)) {
        t2 = this.replacementCodepoint;
        if (!(t2 == null))
          return t2;
        else
          throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1.get$position())));
      } else if ($.ltB(value, 224)) {
        value = $.sub(value, 192);
        additionalBytes = 1;
      } else if ($.ltB(value, 240)) {
        value = $.sub(value, 224);
        additionalBytes = 2;
      } else if ($.ltB(value, 248)) {
        value = $.sub(value, 240);
        additionalBytes = 3;
      } else if ($.ltB(value, 252)) {
        value = $.sub(value, 248);
        additionalBytes = 4;
      } else {
        if ($.ltB(value, 254))
          value = $.sub(value, 252);
        else {
          t2 = this.replacementCodepoint;
          if (!(t2 == null))
            return t2;
          else
            throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S(t1.get$position())));
        }
        additionalBytes = 5;
      }
      j = 0;
    case 2:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(j < additionalBytes && t1.get$hasNext() === true))
                break L0;
              nextValue = t1.next$0();
            case 2:
              state0 = 0;
              if ($.gtB(nextValue, 127) && $.ltB(nextValue, 192))
                value0 = $.or($.shl(value, 6), $.and(nextValue, 63));
              else {
                if ($.geB(nextValue, 192))
                  t1.backup$0();
                break L0;
              }
              ++j;
              value = value0;
          }
      if (j === additionalBytes)
        validSequence = $.ltB(value, 55296) || $.gtB(value, 57343);
      else
        validSequence = false;
      if (!(additionalBytes === 1 && $.gtB(value, 127)))
        if (!(additionalBytes === 2 && $.gtB(value, 2047))) {
          t2 = additionalBytes === 3 && $.gtB(value, 65535);
          nonOverlong = t2;
        } else
          nonOverlong = true;
      else
        nonOverlong = true;
      inRange = $.leB(value, 1114111);
    case 3:
      var t1, value, t2, additionalBytes, j, nextValue, value0, validSequence, nonOverlong, inRange;
      if (state0 === 0 && validSequence && nonOverlong && inRange)
        return value;
      else
        switch (state0) {
          case 0:
            t2 = this.replacementCodepoint;
          case 3:
            if (state0 === 0 && !(t2 == null))
              return t2;
            else
              switch (state0) {
                case 0:
                  t1 = t1.get$position();
                case 3:
                  state0 = 0;
                  throw $.$$throw($.ArgumentError$("Invalid UTF8 at " + $.S($.sub(t1, j))));
              }
        }
  }
}
};

$$.main_anon = {"":"Closure;",
 call$2: function(request, response) {
  response.get$outputStream().write$1($.CONSTANT0.get$charCodes("Hello, world"));
  response.get$outputStream().close$0();
}
};

$$._HttpServer_listenOn_onConnection = {"":"Closure;this_0",
 call$1: function(socket) {
  var t1, connection, t2;
  t1 = this.this_0;
  connection = $._HttpConnection$(t1);
  connection._connectionEstablished$1(socket);
  t2 = t1.get$_connections();
  $.getInterceptor$JSArray(t2).add$1(t2, connection);
  connection.onRequestReceived = t1.get$_handleRequest();
  connection.onClosed = new $._HttpServer_listenOn_onConnection_anon(connection, t1);
  connection.onDetach = new $._HttpServer_listenOn_onConnection_anon0(connection, t1);
  connection.onError = new $._HttpServer_listenOn_onConnection_anon1(connection, t1);
}
};

$$._HttpServer_listenOn_onConnection_anon = {"":"Closure;connection_1,this_2",
 call$0: function() {
  return this.this_2.get$_connections().remove$1(this.connection_1);
}
};

$$._HttpServer_listenOn_onConnection_anon0 = {"":"Closure;connection_3,this_4",
 call$0: function() {
  return this.this_4.get$_connections().remove$1(this.connection_3);
}
};

$$._HttpServer_listenOn_onConnection_anon1 = {"":"Closure;connection_5,this_6",
 call$1: function(e) {
  var t1 = this.this_6;
  t1.get$_connections().remove$1(this.connection_5);
  if (!(t1.get$_onError() == null))
    t1._onError$1(e);
  else
    throw $.$$throw(e);
}
};

$$.Maps__emitMap_anon = {"":"Closure;box_0,result_1,visiting_2",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_0 !== true) {
    t2 = this.result_1;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t1.first_0 = false;
  t1 = this.result_1;
  t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor$JSArray(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"":"Closure;f_0",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.DoubleLinkedQueue_length_anon = {"":"Closure;box_0",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_0 = $.add(t1.counter_0, 1);
}
};

$$.NoSuchMethodError_toString_anon = {"":"Closure;box_0",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_1, 0)) {
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, key);
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, ": ");
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_1 = $.add(t1.i_1, 1);
}
};

$$._HttpConnectionBase__connectionEstablished_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1, buffer;
  t1 = this.this_0;
  buffer = t1.get$_socket().read$0();
  if (!(buffer == null))
    t1.get$_httpParser().streamData$1(buffer);
}
};

$$._HttpConnectionBase__connectionEstablished_anon0 = {"":"Closure;",
 call$1: function(e) {
  return;
}
};

$$.anon = {"":"Closure;",
 call$3: function(statusCode, reasonPhrase, version) {
}
};

$$._HttpHeaders_toString_anon = {"":"Closure;sb_0,this_1",
 call$2: function(name$, values) {
  var t1, t2, t3, i;
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior))
    return this.call$2$bailout(1, name$, values);
  t1 = this.sb_0;
  t2 = $.getInterceptor$JSArray(t1);
  t2.add$1(t1, name$);
  t2.add$1(t1, ": ");
  for (t3 = this.this_1._foldHeader$1(name$) === true, i = 0; i < values.length; ++i) {
    if (i > 0)
      if (t3)
        t2.add$1(t1, ", ");
      else {
        t2.add$1(t1, "\n");
        t2.add$1(t1, name$);
        t2.add$1(t1, ": ");
      }
    if (i >= values.length)
      throw $.ioore(i);
    t2.add$1(t1, values[i]);
  }
  t2.add$1(t1, "\n");
},
 call$2$bailout: function(state0, name$, values) {
  var t1, t2, t3, i;
  t1 = this.sb_0;
  t2 = $.getInterceptor$JSArray(t1);
  t2.add$1(t1, name$);
  t2.add$1(t1, ": ");
  for (t3 = this.this_1._foldHeader$1(name$) === true, i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(values).get$length(values)); ++i) {
    if (i > 0)
      if (t3)
        t2.add$1(t1, ", ");
      else {
        t2.add$1(t1, "\n");
        t2.add$1(t1, name$);
        t2.add$1(t1, ": ");
      }
    t2.add$1(t1, $.index(values, i));
  }
  t2.add$1(t1, "\n");
}
};

$$._HttpRequest__onRequestReceived_anon = {"":"Closure;",
 call$2: function(last, cookie) {
  var t1;
  if (!(last == null))
    return last;
  t1 = cookie.get$name();
  return $.eqB($.getInterceptor$JSString(t1).toUpperCase$0(t1), "DARTSESSID") ? cookie.get$value() : null;
}
};

$$._HttpRequest_cookies__parseCookieString = {"":"Closure;this_1",
 call$1: function(s) {
  var t1, t2, t3, t4, t5, t6, name$, value, t7;
  t1 = {};
  t1.index_0 = 0;
  t2 = new $._HttpRequest_cookies__parseCookieString_done(t1, s);
  t3 = new $._HttpRequest_cookies__parseCookieString_skipWS(t1, s, t2);
  t4 = new $._HttpRequest_cookies__parseCookieString_parseName(t1, s, t2);
  t5 = new $._HttpRequest_cookies__parseCookieString_parseValue(t1, s, t2);
  t1 = new $._HttpRequest_cookies__parseCookieString_expect(t1, s, t2);
  for (t6 = this.this_1; t2.call$0() !== true;) {
    t3.call$0();
    if (t2.call$0() === true)
      return;
    name$ = t4.call$0();
    t3.call$0();
    t1.call$1("=");
    t3.call$0();
    value = t5.call$0();
    t7 = t6.get$_cookies();
    $.getInterceptor$JSArray(t7).add$1(t7, $._Cookie$(name$, value));
    t3.call$0();
    if (t2.call$0() === true)
      return;
    t1.call$1(";");
  }
}
};

$$._HttpRequest_cookies__parseCookieString_done = {"":"Closure;box_0,s_2",
 call$0: function() {
  var t1, t2;
  t1 = this.box_0.index_0;
  t2 = this.s_2;
  return $.eq(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
}
};

$$._HttpRequest_cookies__parseCookieString_skipWS = {"":"Closure;box_0,s_3,done_4",
 call$0: function() {
  var t1, t2, t3, t4;
  t1 = this.box_0;
  t2 = this.s_3;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior))
    return this.call$0$bailout1(1, t2, t1);
  for (; this.done_4.call$0() !== true;) {
    t3 = t1.index_0;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    if (!$.eqB(t2[t3], " ")) {
      t3 = t1.index_0;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t4 = !$.eqB(t2[t3], "\t");
      t3 = t4;
    } else
      t3 = false;
    if (t3)
      return;
    t1.index_0 = $.add(t1.index_0, 1);
  }
},
 call$0$bailout1: function(state0, t2, t1) {
  for (; this.done_4.call$0() !== true;) {
    if (!$.eqB($.index(t2, t1.index_0), " ") && !$.eqB($.index(t2, t1.index_0), "\t"))
      return;
    t1.index_0 = $.add(t1.index_0, 1);
  }
}
};

$$._HttpRequest_cookies__parseCookieString_parseName = {"":"Closure;box_0,s_5,done_6",
 call$0: function() {
  var t1, start, t2, t3, t4;
  t1 = this.box_0;
  start = t1.index_0;
  t2 = this.s_5;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior))
    return this.call$0$bailout0(1, t2, start, t1);
  for (; this.done_6.call$0() !== true;) {
    t3 = t1.index_0;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    if (!$.eqB(t2[t3], " ")) {
      t3 = t1.index_0;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      if (!$.eqB(t2[t3], "\t")) {
        t3 = t1.index_0;
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t2.length)
          throw $.ioore(t3);
        t4 = $.eqB(t2[t3], "=");
        t3 = t4;
      } else
        t3 = true;
    } else
      t3 = true;
    if (t3)
      break;
    t1.index_0 = $.add(t1.index_0, 1);
  }
  t2 = $.getInterceptor$JSString(t2).substring$2(t2, start, t1.index_0);
  return $.getInterceptor$JSString(t2).toLowerCase$0(t2);
},
 call$0$bailout0: function(state0, t2, start, t1) {
  for (; this.done_6.call$0() !== true;) {
    if ($.eqB($.index(t2, t1.index_0), " ") || $.eqB($.index(t2, t1.index_0), "\t") || $.eqB($.index(t2, t1.index_0), "="))
      break;
    t1.index_0 = $.add(t1.index_0, 1);
  }
  t2 = $.getInterceptor$JSString(t2).substring$2(t2, start, t1.index_0);
  return $.getInterceptor$JSString(t2).toLowerCase$0(t2);
}
};

$$._HttpRequest_cookies__parseCookieString_parseValue = {"":"Closure;box_0,s_7,done_8",
 call$0: function() {
  var t1, start, t2, t3, t4;
  t1 = this.box_0;
  start = t1.index_0;
  t2 = this.s_7;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior))
    return this.call$0$bailout(1, t2, start, t1);
  for (; this.done_8.call$0() !== true;) {
    t3 = t1.index_0;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    if (!$.eqB(t2[t3], " ")) {
      t3 = t1.index_0;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      if (!$.eqB(t2[t3], "\t")) {
        t3 = t1.index_0;
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t2.length)
          throw $.ioore(t3);
        t4 = $.eqB(t2[t3], ";");
        t3 = t4;
      } else
        t3 = true;
    } else
      t3 = true;
    if (t3)
      break;
    t1.index_0 = $.add(t1.index_0, 1);
  }
  t2 = $.getInterceptor$JSString(t2).substring$2(t2, start, t1.index_0);
  return $.getInterceptor$JSString(t2).toLowerCase$0(t2);
},
 call$0$bailout: function(state0, t2, start, t1) {
  for (; this.done_8.call$0() !== true;) {
    if ($.eqB($.index(t2, t1.index_0), " ") || $.eqB($.index(t2, t1.index_0), "\t") || $.eqB($.index(t2, t1.index_0), ";"))
      break;
    t1.index_0 = $.add(t1.index_0, 1);
  }
  t2 = $.getInterceptor$JSString(t2).substring$2(t2, start, t1.index_0);
  return $.getInterceptor$JSString(t2).toLowerCase$0(t2);
}
};

$$._HttpRequest_cookies__parseCookieString_expect = {"":"Closure;box_0,s_9,done_10",
 call$1: function(expected) {
  var t1, t2;
  if (this.done_10.call$0() === true)
    throw $.$$throw($.HttpException$("Failed to parse header value [" + $.S(this.s_9) + "]"));
  t1 = this.s_9;
  t2 = this.box_0;
  if (!$.eqB($.index(t1, t2.index_0), expected))
    throw $.$$throw($.HttpException$("Failed to parse header value [" + $.S(t1) + "]"));
  t2.index_0 = $.add(t2.index_0, 1);
}
};

$$._HttpRequest_cookies_anon = {"":"Closure;_parseCookieString_11",
 call$1: function(headerValue) {
  return this._parseCookieString_11.call$1(headerValue);
}
};

$$._HttpHeaders__write_writeBuffer = {"":"Closure;box_0,connection_1,buffer_2",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.connection_1;
  t2 = this.buffer_2;
  t3 = this.box_0;
  t1._writeFrom$3(t2, 0, t3.bufferPos_0);
  t3.bufferPos_0 = 0;
}
};

$$._HttpHeaders__write_anon = {"":"Closure;box_0,this_3,writeBuffer_4,bufferSize_5,buffer_6",
 call$2: function(name$, values) {
  var fold, nameData, nameDataLen, t1, t2, t4, t5, t3, i, t6, data, dataLen, t7;
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior))
    return this.call$2$bailout0(1, name$, values);
  fold = this.this_3._foldHeader$1(name$);
  nameData = $.getInterceptor$JSString(name$).get$charCodes(name$);
  nameDataLen = $.getInterceptor$JSStringJSArray(nameData).get$length(nameData);
  if (typeof nameDataLen !== 'number')
    return this.call$2$bailout0(2, nameData, values, nameDataLen, fold);
  t1 = nameDataLen + 2;
  t2 = this.bufferSize_5;
  if (typeof t2 !== 'number')
    return this.call$2$bailout0(3, values, fold, nameData, nameDataLen, t1, t2);
  t4 = this.box_0;
  t5 = t4.bufferPos_0;
  if (typeof t5 !== 'number')
    throw $.iae(t5);
  if (t1 > t2 - t5)
    this.writeBuffer_4.call$0();
  t1 = this.buffer_6;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior)
    return this.call$2$bailout0(4, t4, values, fold, nameData, nameDataLen, t1, t2);
  $.CONSTANT1.setRange$3(t1, t4.bufferPos_0, nameDataLen, nameData);
  t4.bufferPos_0 = $.add(t4.bufferPos_0, nameDataLen);
  t5 = t4.bufferPos_0;
  t4.bufferPos_0 = $.add(t5, 1);
  if (t5 !== (t5 | 0))
    throw $.iae(t5);
  if (t5 < 0 || t5 >= t1.length)
    throw $.ioore(t5);
  t1[t5] = 58;
  t5 = t4.bufferPos_0;
  t4.bufferPos_0 = $.add(t5, 1);
  if (t5 !== (t5 | 0))
    throw $.iae(t5);
  if (t5 < 0 || t5 >= t1.length)
    throw $.ioore(t5);
  t1[t5] = 32;
  for (t3 = fold === true, t5 = this.writeBuffer_4, i = 0; i < values.length; ++i) {
    t6 = values[i];
    data = $.getInterceptor$JSString(t6).get$charCodes(t6);
    dataLen = $.getInterceptor$JSStringJSArray(data).get$length(data);
    if (typeof dataLen !== 'number')
      throw $.iae(dataLen);
    t6 = nameDataLen + dataLen + 6;
    t7 = t4.bufferPos_0;
    if (typeof t7 !== 'number')
      throw $.iae(t7);
    if (t6 > t2 - t7)
      t5.call$0();
    if (i > 0) {
      t6 = t4.bufferPos_0;
      if (t3) {
        t4.bufferPos_0 = $.add(t6, 1);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t1.length)
          throw $.ioore(t6);
        t1[t6] = 44;
        t6 = t4.bufferPos_0;
        t4.bufferPos_0 = $.add(t6, 1);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t1.length)
          throw $.ioore(t6);
        t1[t6] = 32;
      } else {
        t4.bufferPos_0 = $.add(t6, 1);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t1.length)
          throw $.ioore(t6);
        t1[t6] = 13;
        t6 = t4.bufferPos_0;
        t4.bufferPos_0 = $.add(t6, 1);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t1.length)
          throw $.ioore(t6);
        t1[t6] = 10;
        $.CONSTANT1.setRange$3(t1, t4.bufferPos_0, nameDataLen, nameData);
        t4.bufferPos_0 = $.add(t4.bufferPos_0, nameDataLen);
        t6 = t4.bufferPos_0;
        t4.bufferPos_0 = $.add(t6, 1);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t1.length)
          throw $.ioore(t6);
        t1[t6] = 58;
        t6 = t4.bufferPos_0;
        t4.bufferPos_0 = $.add(t6, 1);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t1.length)
          throw $.ioore(t6);
        t1[t6] = 32;
      }
    }
    $.CONSTANT1.setRange$3(t1, t4.bufferPos_0, dataLen, data);
    t4.bufferPos_0 = $.add(t4.bufferPos_0, dataLen);
  }
  t2 = t4.bufferPos_0;
  t4.bufferPos_0 = $.add(t2, 1);
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = 13;
  t2 = t4.bufferPos_0;
  t4.bufferPos_0 = $.add(t2, 1);
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = 10;
},
 call$2$bailout0: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      values = env1;
      name$ = env0;
      break;
    case 2:
      fold = env3;
      nameDataLen = env2;
      values = env1;
      nameData = env0;
      break;
    case 3:
      t2 = env5;
      t1 = env4;
      nameDataLen = env3;
      nameData = env2;
      fold = env1;
      values = env0;
      break;
    case 4:
      t2 = env6;
      t1 = env5;
      nameDataLen = env4;
      nameData = env3;
      fold = env2;
      values = env1;
      t4 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      fold = this.this_3._foldHeader$1(name$);
      nameData = $.getInterceptor$JSString(name$).get$charCodes(name$);
      nameDataLen = $.getInterceptor$JSStringJSArray(nameData).get$length(nameData);
    case 2:
      state0 = 0;
      t1 = $.add(nameDataLen, 2);
      t2 = this.bufferSize_5;
    case 3:
      state0 = 0;
      t4 = this.box_0;
      if ($.gtB(t1, $.sub(t2, t4.bufferPos_0)))
        this.writeBuffer_4.call$0();
      t1 = this.buffer_6;
    case 4:
      var values, name$, fold, nameData, nameDataLen, t1, t2, t4, t5, t6, t3, i, t7, data, dataLen;
      state0 = 0;
      t5 = $.getInterceptor$JSArray(t1);
      t5.setRange$3(t1, t4.bufferPos_0, nameDataLen, nameData);
      t4.bufferPos_0 = $.add(t4.bufferPos_0, nameDataLen);
      t6 = t4.bufferPos_0;
      t4.bufferPos_0 = $.add(t6, 1);
      $.indexSet(t1, t6, 58);
      t6 = t4.bufferPos_0;
      t4.bufferPos_0 = $.add(t6, 1);
      $.indexSet(t1, t6, 32);
      for (t3 = fold === true, t6 = this.writeBuffer_4, i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(values).get$length(values)); ++i) {
        t7 = $.index(values, i);
        data = $.getInterceptor$JSString(t7).get$charCodes(t7);
        dataLen = $.getInterceptor$JSStringJSArray(data).get$length(data);
        if ($.gtB($.add($.add(nameDataLen, dataLen), 6), $.sub(t2, t4.bufferPos_0)))
          t6.call$0();
        if (i > 0) {
          t7 = t4.bufferPos_0;
          if (t3) {
            t4.bufferPos_0 = $.add(t7, 1);
            $.indexSet(t1, t7, 44);
            t7 = t4.bufferPos_0;
            t4.bufferPos_0 = $.add(t7, 1);
            $.indexSet(t1, t7, 32);
          } else {
            t4.bufferPos_0 = $.add(t7, 1);
            $.indexSet(t1, t7, 13);
            t7 = t4.bufferPos_0;
            t4.bufferPos_0 = $.add(t7, 1);
            $.indexSet(t1, t7, 10);
            t5.setRange$3(t1, t4.bufferPos_0, nameDataLen, nameData);
            t4.bufferPos_0 = $.add(t4.bufferPos_0, nameDataLen);
            t7 = t4.bufferPos_0;
            t4.bufferPos_0 = $.add(t7, 1);
            $.indexSet(t1, t7, 58);
            t7 = t4.bufferPos_0;
            t4.bufferPos_0 = $.add(t7, 1);
            $.indexSet(t1, t7, 32);
          }
        }
        t5.setRange$3(t1, t4.bufferPos_0, dataLen, data);
        t4.bufferPos_0 = $.add(t4.bufferPos_0, dataLen);
      }
      t2 = t4.bufferPos_0;
      t4.bufferPos_0 = $.add(t2, 1);
      $.indexSet(t1, t2, 13);
      t2 = t4.bufferPos_0;
      t4.bufferPos_0 = $.add(t2, 1);
      $.indexSet(t1, t2, 10);
  }
}
};

$$._HttpResponse__writeHeader_anon = {"":"Closure;this_0",
 call$1: function(cookie) {
  this.this_0.get$_headers().add$2("set-cookie", cookie);
}
};

$$._HttpRequestResponseBase_persistentConnection_anon = {"":"Closure;",
 call$1: function(value) {
  return $.eq($.getInterceptor$JSString(value).toLowerCase$0(value), "close");
}
};

$$._HttpRequestResponseBase_persistentConnection_anon0 = {"":"Closure;",
 call$1: function(value) {
  return $.eq($.getInterceptor$JSString(value).toLowerCase$0(value), "keep-alive");
}
};

$$._BaseDataInputStream__checkScheduleCallbacks_issueDataCallback = {"":"Closure;this_0",
 call$1: function(timer) {
  var t1 = this.this_0;
  t1.set$_scheduledDataCallback(null);
  if (!(t1.get$_clientDataHandler() == null)) {
    t1._clientDataHandler$0();
    t1._checkScheduleCallbacks$0();
  }
}
};

$$._BaseDataInputStream__checkScheduleCallbacks_issueCloseCallback = {"":"Closure;this_1",
 call$1: function(timer) {
  var t1 = this.this_1;
  t1.set$_scheduledCloseCallback(null);
  t1.set$_closeCallbackCalled(true);
  if (!(t1.get$_clientCloseHandler() == null))
    t1._clientCloseHandler$0();
}
};

$$.anon0 = {"":"Closure;callback_0,this_1",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.invokeClosure_anon = {"":"Closure;closure_0",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":"Closure;closure_1,arg1_2",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"":"Closure;closure_3,arg2_4,arg1_5",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$._HttpParser_streamDone_type = {"":"Closure;this_0",
 call$0: function() {
  return this.this_0.get$_requestParser() === true ? "request" : "response";
}
};

$$._SecureSocket__setHandlersAfterRead_anon = {"":"Closure;this_0",
 call$1: function(_) {
  return this.this_0._secureDataHandler$0();
}
};

$$._SecureSocket__setHandlersAfterRead_anon0 = {"":"Closure;this_1",
 call$1: function(_) {
  return this.this_1._secureCloseHandler$0();
}
};

$$._SocketOutputStream_close_anon = {"":"Closure;this_0",
 call$1: function(t) {
  var t1 = this.this_0;
  if (!(t1.get$_onClosed() == null))
    t1._onClosed$0();
}
};

$$._CloseQueue_shutdown_anon = {"":"Closure;",
 call$1: function(connection) {
  connection.get$_socket().close$0();
}
};

$$._CloseQueue_add_closeIfDone = {"":"Closure;connection_0,this_1",
 call$0: function() {
  var t1 = this.connection_0;
  if (t1.get$_isWriteClosed() === true || t1.get$_isReadClosed() === true) {
    this.this_1.get$_q().remove$1(t1);
    t1.get$_socket().close$0();
    if (!(t1.get$onClosed() == null))
      t1.onClosed$0();
  }
}
};

$$._CloseQueue_add_anon = {"":"Closure;closeIfDone_2,connection_3",
 call$0: function() {
  var t1 = this.connection_3;
  t1.set$_state($.or(t1.get$_state(), 32));
  this.closeIfDone_2.call$0();
}
};

$$._CloseQueue_add_anon0 = {"":"Closure;",
 call$0: function() {
}
};

$$._CloseQueue_add_anon1 = {"":"Closure;closeIfDone_4,connection_5",
 call$0: function() {
  var t1 = this.connection_5;
  t1.set$_state($.or(t1.get$_state(), 16));
  this.closeIfDone_4.call$0();
}
};

$$._CloseQueue_add_anon2 = {"":"Closure;",
 call$0: function() {
}
};

$$._CloseQueue_add_anon3 = {"":"Closure;closeIfDone_6,connection_7",
 call$1: function(e) {
  var t1 = this.connection_7;
  t1.set$_state($.or(t1.get$_state(), 16));
  t1.set$_state($.or(t1.get$_state(), 32));
  this.closeIfDone_6.call$0();
}
};

$$._LinkedHashMapImpl_keys_anon = {"":"Closure;box_0,list_1",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._HashMapImpl_keys_anon = {"":"Closure;box_0,list_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._HashSetImpl_forEach_anon = {"":"Closure;f_0",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$._BaseSendPort_call_anon = {"":"Closure;port_0,completer_1",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"":"Closure;replyTo_0,this_1,message_2",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_1;
  t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_2, "replyTo", t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"":"Closure;callback_0",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"":"Closure;box_0,values_1,completer_2,result_3,pos_4",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_1;
  $.indexSet(t1, this.pos_4, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_0, 1);
  t2.remaining_0 = remaining;
  if ($.eqB(remaining, 0) && this.result_3.get$isComplete() !== true)
    this.completer_2.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":"Closure;future_5,completer_6,result_7",
 call$1: function(exception) {
  if (this.result_7.get$isComplete() !== true)
    this.completer_6.completeException$2(exception, this.future_5.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":"Closure;this_0",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._LinkedHashMapImpl_values_anon = {"":"Closure;box_0,list_1",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._HashMapImpl_values_anon = {"":"Closure;box_0,list_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$._PendingSendPortFinder_visitList_anon = {"":"Closure;this_0",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"":"Closure;this_1,message_2,replyTo_3",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_1;
  t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_2;
  t1.msg_0 = msg;
  t1.reply_1 = t3;
  if (shouldSerialize) {
    t1.msg_0 = $._serializeMessage(t1.msg_0);
    t1.reply_1 = $._serializeMessage(t1.reply_1);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"":"Closure;box_0,this_4,shouldSerialize_5",
 call$0: function() {
  var t1, t2;
  t1 = this.this_4;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_5 === true) {
      t2 = this.box_0;
      t2.msg_0 = $._deserializeMessage(t2.msg_0);
      t2.reply_1 = $._deserializeMessage(t2.reply_1);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_0, t2.reply_1);
  }
}
};

$$._Copier_visitMap_anon = {"":"Closure;box_0,this_1",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_0;
  t2 = this.this_1;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"":"Closure;this_0",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.BoundClosure = {"":"Closure;self,target", call$1: function(p0) {
  return this.self[this.target](p0);
}
};
$$.BoundClosure0 = {"":"Closure;self,target", call$2: function(p0, p1) {
  return this.self[this.target](p0, p1);
}
};
$$.BoundClosure1 = {"":"Closure;self,target", call$4: function(p0, p1, p2, p3) {
  return this.self[this.target](p0, p1, p2, p3);
}
};
$$.BoundClosure2 = {"":"Closure;self,target", call$0: function() {
  return this.self[this.target]();
}
};
$$.BoundClosure3 = {"":"Closure;self,target", call$5: function(p0, p1, p2, p3, p4) {
  return this.self[this.target](p0, p1, p2, p3, p4);
}
};
$$.BoundClosure4 = {"":"Closure;self,target", call$1: function(p0) {
  return this.self[this.target](p0);
},
 call$0: function() {
  return this.call$1(null);
}
};
$$.BoundClosure5 = {"":"Closure;self,target", call$1: function(p0) {
  return this.self[this.target](p0);
},
 call$0: function() {
  return this.call$1(null);
}
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.mod = function(a, b) {
  var result;
  if ($.checkNumbers(a, b)) {
    result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.CONSTANT2.truncate$0(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.or = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a | b) >>> 0;
  return a.operator$or$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.CONSTANT2.truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$._SecureSocket$ = function(host, requestedPort, certificateName, is_server, requestClientCertificate, requireClientCertificate, sendClientCertificate, socket) {
  var t1 = new $._SecureSocket(socket, host, is_server, certificateName, requestClientCertificate, requireClientCertificate, sendClientCertificate, 200, false, false, false, false, true, true, null, null, false, null, null, null, null, null, null, $._SecureFilter__SecureFilter());
  t1._SecureSocket$8$is_server$requestClientCertificate$requireClientCertificate$sendClientCertificate$socket(host, requestedPort, certificateName, is_server, requestClientCertificate, requireClientCertificate, sendClientCertificate, socket);
  return t1;
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CONSTANT;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$._CloseQueue$ = function() {
  return new $._CloseQueue($.Set_Set());
};

$.SocketIOException$ = function(message, osError) {
  return new $.SocketIOException(message, osError);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.CONSTANT0.endsWith$1(message, "is null") === true || $.CONSTANT0.endsWith$1(message, "is undefined") === true || $.CONSTANT0.endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.CONSTANT1.iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg2, arg1));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.getInterceptor$JSArray(m).forEach$1(m, new $.Maps__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT17));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT17)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.CONSTANT1.iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_some = function(iterable, f) {
  var t1;
  for (t1 = $.CONSTANT1.iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_liblib$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.Collections_reduce = function(iterable, initialValue, combine) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    initialValue = combine.call$2(initialValue, t1.next$0());
  return initialValue;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || !!c.is$List);
  t2 = $.getInterceptor$JSArray(result);
  t2.add$1(result, isList ? "[" : "{");
  for (t3 = $.getInterceptor$JSArray(c).iterator$0(c), first = true; t3.get$hasNext() === true; first = false) {
    t4 = t3.next$0();
    if (!first)
      t2.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t2.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || !!o.is$Collection))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || !!o.is$List) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && !!o.is$Map)
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$._SocketOutputStream$ = function(socket) {
  return new $._SocketOutputStream(socket, $._BufferList$(), null, null, false, false, null);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$._SecureFilter__SecureFilter = function() {
  throw $.$$throw($.UnsupportedError$("_SecureFilter._SecureFilter"));
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.SecureServerSocket_SecureServerSocket = function(bindAddress, port, backlog, certificate_name, requestClientCertificate, requireClientCertificate) {
  return $._SecureServerSocket$(bindAddress, port, backlog, certificate_name, requestClientCertificate, requireClientCertificate);
};

$.HttpException$ = function(message) {
  return new $.HttpException(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$.Socket_Socket = function(host, port) {
  throw $.$$throw($.UnsupportedError$("Socket constructor"));
};

$._HttpHeaders$ = function() {
  return new $._HttpHeaders(true, $.Map_Map(), null, null, null);
};

$.main = function() {
  var server = $.HttpServer_HttpServer();
  server.listen$2("127.0.0.1", 8080);
  server.set$defaultRequestHandler(new $.main_anon());
};

$._HashSetImpl$ = function() {
  var t1 = new $._HashSetImpl(null);
  t1._HashSetImpl$0();
  return t1;
};

$._BufferList$ = function() {
  var t1 = new $._BufferList(null, null, null);
  t1._BufferList$0();
  return t1;
};

$._HashSetIterator$ = function(set_) {
  var t1 = new $._HashSetIterator(set_._backingMap._keys, -1);
  t1._HashSetIterator$1(set_);
  return t1;
};

$._HttpParser$requestParser = function() {
  var t1 = new $._HttpParser(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, $._HttpHeaders$(), null, null, null, null, null, null);
  t1._HttpParser$requestParser$0();
  return t1;
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.parseInt = function(string) {
  return $.int_parse(string);
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CONSTANT16.get$isNegative(b) === true || $.CONSTANT16.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._HttpRequest$ = function(connection) {
  return new $._HttpRequest(null, null, null, null, null, null, null, null, null, 0, false, connection, null, null, "1.1", -1, 0);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.Cookie_Cookie = function(name$, value) {
  return $._Cookie$(name$, value);
};

$.decodeUtf8 = function(bytes, offset, length$, replacementCodepoint) {
  return $.String_String$fromCharCodes($.Utf8Decoder$(bytes, offset, length$, replacementCodepoint).decodeRest$0());
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$._HttpInputStream$ = function(_requestOrResponse) {
  var t1 = new $._HttpInputStream(_requestOrResponse, false, false, null, null, null, null, null);
  t1._HttpInputStream$1(_requestOrResponse);
  return t1;
};

$.String_String$fromCharCodes = function(charCodes) {
  var charCodes0;
  if (!$.isJsArray(charCodes)) {
    if (!(typeof charCodes === 'object' && charCodes !== null && (charCodes.constructor === Array || !!charCodes.is$List)))
      throw $.$$throw($.ArgumentError$(charCodes));
    charCodes0 = $.List_List$from(charCodes);
    charCodes = charCodes0;
  }
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.List_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(null);
  for (t1 = $.getInterceptor$JSArray(other).iterator$0(other); t1.get$hasNext() === true;)
    list.push(t1.next$0());
  return list;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._HttpResponse$ = function(httpConnection) {
  var t1 = new $._HttpResponse(200, null, null, null, 0, false, httpConnection, null, null, "1.1", -1, 0);
  t1._HttpResponse$1(httpConnection);
  return t1;
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._HttpOutputStream$ = function(_requestOrResponse) {
  return new $._HttpOutputStream(_requestOrResponse, null);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.HttpServer_HttpServer = function() {
  return $._HttpServer$();
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$.Timer_Timer = function(milliSeconds, callback) {
  if ($._window() == null)
    throw $.$$throw($.UnsupportedError$("Timer interface not supported."));
  return $._Timer$(milliSeconds, callback);
};

$.Uint8List_Uint8List = function(length$) {
  throw $.$$throw($.UnsupportedError$("Uint8List"));
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.getInterceptor$JSStringJSArray(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT18);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_0 = futures.length;
  values = $.List_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(t1, values, completer, result, i));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$._Cookie$ = function(name$, value) {
  return new $._Cookie(name$, value, null, null, null, null, false, false);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$._HttpUtils_decodeUrlEncodedString = function(urlEncoded) {
  var t1, index, encoded, t2, bytes, i, byte$, j, charCode;
  if (typeof urlEncoded !== 'string' && (typeof urlEncoded !== 'object' || urlEncoded === null || urlEncoded.constructor !== Array && !urlEncoded.is$JavaScriptIndexingBehavior))
    return $._HttpUtils_decodeUrlEncodedString$bailout(1, urlEncoded);
  t1 = $.getInterceptor$JSStringJSArray(urlEncoded);
  index = 0;
  encoded = false;
  while (true) {
    t2 = !encoded;
    if (!(t2 && index < urlEncoded.length))
      break;
    if (index >= urlEncoded.length)
      throw $.ioore(index);
    if (!$.eqB(urlEncoded[index], "+")) {
      if (index >= urlEncoded.length)
        throw $.ioore(index);
      encoded = $.eqB(urlEncoded[index], "%");
    } else
      encoded = true;
    ++index;
  }
  if (t2)
    return urlEncoded;
  --index;
  bytes = $.List_List(null);
  for (i = 0; i < index; ++i)
    bytes.push(t1.charCodeAt$1(urlEncoded, i));
  for (i = index; t2 = urlEncoded.length, i < t2; ++i) {
    if (i < 0)
      throw $.ioore(i);
    if ($.eqB(urlEncoded[i], "+"))
      bytes.push(32);
    else {
      if (i < 0 || i >= urlEncoded.length)
        throw $.ioore(i);
      if ($.eqB(urlEncoded[i], "%")) {
        if (urlEncoded.length - i < 2)
          throw $.$$throw($.HttpException$("Invalid URL encoding"));
        for (byte$ = 0, j = 0; j < 2; ++j) {
          charCode = t1.charCodeAt$1(urlEncoded, i + j + 1);
          if ($.leB(48, charCode) && $.leB(charCode, 57)) {
            t2 = byte$ * 16;
            if (typeof charCode !== 'number')
              throw $.iae(charCode);
            byte$ = t2 + charCode - 48;
          } else if ($.leB(65, charCode) && $.leB(charCode, 70)) {
            t2 = byte$ * 16;
            if (typeof charCode !== 'number')
              throw $.iae(charCode);
            byte$ = t2 + charCode - 55;
          } else if ($.leB(97, charCode) && $.leB(charCode, 102)) {
            t2 = byte$ * 16;
            if (typeof charCode !== 'number')
              throw $.iae(charCode);
            byte$ = t2 + charCode - 87;
          } else
            throw $.$$throw($.HttpException$("Invalid URL encoding"));
        }
        bytes.push(byte$);
        i += 2;
      } else
        bytes.push(t1.charCodeAt$1(urlEncoded, i));
    }
  }
  return $.decodeUtf8(bytes, 0, null, 65533);
};

$._HttpUtils_splitQueryString = function(queryString) {
  var result, t1, currentPosition, position, name$, value;
  result = $.Map_Map();
  for (t1 = $.getInterceptor$JSStringJSArray(queryString), currentPosition = 0; $.ltB(currentPosition, t1.get$length(queryString));) {
    position = t1.indexOf$2(queryString, "=", currentPosition);
    if ($.eqB(position, -1))
      break;
    name$ = t1.substring$2(queryString, currentPosition, position);
    currentPosition = $.add(position, 1);
    position = t1.indexOf$2(queryString, "&", currentPosition);
    if ($.eqB(position, -1)) {
      value = t1.substring$1(queryString, currentPosition);
      currentPosition = t1.get$length(queryString);
    } else {
      value = t1.substring$2(queryString, currentPosition, position);
      currentPosition = $.add(position, 1);
    }
    $.indexSet(result, $._HttpUtils_decodeUrlEncodedString(name$), $._HttpUtils_decodeUrlEncodedString(value));
  }
  return result;
};

$._HttpUtils_formatDate = function(date) {
  var d, sb, t1, t2, t3, t4, t5;
  d = date.toUtc$0();
  sb = $.StringBuffer_StringBuffer("");
  t1 = $.getInterceptor$JSArray(sb);
  t2 = $.sub(d.get$weekday(), 1);
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= $.CONSTANT5.length)
    throw $.ioore(t2);
  t1.add$1(sb, $.CONSTANT5[t2]);
  t1.add$1(sb, ", ");
  t3 = d.get$day();
  t1.add$1(sb, $.getInterceptor(t3).toString$0(t3));
  t1.add$1(sb, " ");
  t4 = $.sub(d.get$month(), 1);
  if (t4 !== (t4 | 0))
    throw $.iae(t4);
  if (t4 < 0 || t4 >= $.CONSTANT6.length)
    throw $.ioore(t4);
  t1.add$1(sb, $.CONSTANT6[t4]);
  t1.add$1(sb, " ");
  t5 = d.get$year();
  t1.add$1(sb, $.getInterceptor(t5).toString$0(t5));
  if ($.ltB(d.get$hour(), 9))
    t1.add$1(sb, " 0");
  else
    t1.add$1(sb, " ");
  t2 = d.get$hour();
  t1.add$1(sb, $.getInterceptor(t2).toString$0(t2));
  if ($.ltB(d.get$minute(), 9))
    t1.add$1(sb, ":0");
  else
    t1.add$1(sb, ":");
  t2 = d.get$minute();
  t1.add$1(sb, $.getInterceptor(t2).toString$0(t2));
  if ($.ltB(d.get$second(), 9))
    t1.add$1(sb, ":0");
  else
    t1.add$1(sb, ":");
  t2 = d.get$second();
  t1.add$1(sb, $.getInterceptor(t2).toString$0(t2));
  t1.add$1(sb, " GMT");
  return t1.toString$0(sb);
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$.Utf8Decoder$ = function(utf8EncodedBytes, offset, length$, replacementCodepoint) {
  return new $.Utf8Decoder($._ListRange$(utf8EncodedBytes, offset, length$).iterator$0(), replacementCodepoint);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$._ListRange$ = function(source, offset, length$) {
  var t1 = length$ == null ? $.sub($.getInterceptor$JSStringJSArray(source).get$length(source), offset) : length$;
  t1 = new $._ListRange(source, offset, t1);
  t1._ListRange$3(source, offset, length$);
  return t1;
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.CONSTANT0.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.CONSTANT2.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, i, result, subarray, t2;
  if (typeof array !== 'object' || array === null || array.constructor !== Array && !array.is$JavaScriptIndexingBehavior)
    return $.Primitives__fromCharCodeApply$bailout(1, array);
  end = array.length;
  for (t1 = end <= 500, i = 0, result = ""; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.getInterceptor$JSArray(codePoints).iterator$0(codePoints); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(charCodes).iterator$0(charCodes); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$._ListRangeIteratorImpl$ = function(_source, _offset, _end) {
  return new $._ListRangeIteratorImpl(_source, _offset, _end);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$._HttpServer$ = function() {
  return new $._HttpServer(null, false, false, $.Set_Set(), $.List_List(null), null, null, $._CloseQueue$(), null);
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.ServerSocket_ServerSocket = function(bindAddress, port, backlog) {
  throw $.$$throw($.UnsupportedError$("ServerSocket constructor"));
};

$.StreamException$ = function(message) {
  return new $.StreamException(message);
};

$.HttpParserException$ = function(message) {
  return new $.HttpParserException(message);
};

$._HttpSessionManager$ = function() {
  return new $._HttpSessionManager($.makeLiteralMap([]), 1200, null, null, null);
};

$.Set_Set = function() {
  return $._HashSetImpl$();
};

$._HttpConnection$ = function(_server) {
  var t1 = new $._HttpConnection(_server, null, null, false, null, null, null, 0, null, null, null, null, $._HttpConnectionBase__nextHashCode);
  t1._HttpConnectionBase$0();
  t1._HttpConnection$1(_server);
  return t1;
};

$._SecureServerSocket$ = function(bindAddress, port, backlog, certificate_name, requestClientCertificate, requireClientCertificate) {
  var t1 = new $._SecureServerSocket(null, null, certificate_name, requestClientCertificate, requireClientCertificate);
  t1._SecureServerSocket$6(bindAddress, port, backlog, certificate_name, requestClientCertificate, requireClientCertificate);
  return t1;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
    case 3:
      length$ = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor$JSStringJSArray(strings).get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = $.index(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var t2, completer, result, values, i, future;
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT18);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List(t2.get$length(futures));
  for (i = 0; $.ltB(i, t2.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(t1, values, completer, result, i));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.Primitives__fromCharCodeApply$bailout = function(state0, env0, env1) {
  switch (state0) {
    case 1:
      array = env0;
      break;
    case 2:
      end = env1;
      array = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      end = $.getInterceptor$JSStringJSArray(array).get$length(array);
    case 2:
      var array, end, i, result, subarray, t1;
      state0 = 0;
      for (i = 0, result = ""; $.ltB(i, end); i += 500) {
        if ($.leB(end, 500))
          subarray = array;
        else {
          t1 = i + 500;
          t1 = $.ltB(t1, end) ? t1 : end;
          subarray = array.slice(i, t1);
        }
        result = result + String.fromCharCode.apply(null, subarray);
      }
      return result;
  }
};

$._HttpUtils_decodeUrlEncodedString$bailout = function(state0, urlEncoded) {
  var t1, index, encoded, t2, bytes, i, byte$, j, charCode;
  t1 = $.getInterceptor$JSStringJSArray(urlEncoded);
  index = 0;
  encoded = false;
  while (true) {
    t2 = !encoded;
    if (!(t2 && $.ltB(index, t1.get$length(urlEncoded))))
      break;
    encoded = $.eqB($.index(urlEncoded, index), "+") || $.eqB($.index(urlEncoded, index), "%");
    ++index;
  }
  if (t2)
    return urlEncoded;
  --index;
  bytes = $.List_List(null);
  for (t2 = $.getInterceptor$JSString(urlEncoded), i = 0; i < index; ++i)
    bytes.push(t2.charCodeAt$1(urlEncoded, i));
  for (i = index; $.ltB(i, t1.get$length(urlEncoded)); ++i)
    if ($.eqB($.index(urlEncoded, i), "+"))
      bytes.push(32);
    else if ($.eqB($.index(urlEncoded, i), "%")) {
      if ($.ltB($.sub(t1.get$length(urlEncoded), i), 2))
        throw $.$$throw($.HttpException$("Invalid URL encoding"));
      for (byte$ = 0, j = 0; j < 2; ++j) {
        charCode = t1.charCodeAt$1(urlEncoded, i + j + 1);
        if ($.leB(48, charCode) && $.leB(charCode, 57)) {
          t2 = byte$ * 16;
          if (typeof charCode !== 'number')
            throw $.iae(charCode);
          byte$ = t2 + charCode - 48;
        } else if ($.leB(65, charCode) && $.leB(charCode, 70)) {
          t2 = byte$ * 16;
          if (typeof charCode !== 'number')
            throw $.iae(charCode);
          byte$ = t2 + charCode - 55;
        } else if ($.leB(97, charCode) && $.leB(charCode, 102)) {
          t2 = byte$ * 16;
          if (typeof charCode !== 'number')
            throw $.iae(charCode);
          byte$ = t2 + charCode - 87;
        } else
          throw $.$$throw($.HttpException$("Invalid URL encoding"));
      }
      bytes.push(byte$);
      i += 2;
    } else
      bytes.push(t1.charCodeAt$1(urlEncoded, i));
  return $.decodeUtf8(bytes, 0, null, 65533);
};

$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
Isolate.$finishClasses($$);
$$ = {};
$.CONSTANT3 = new Isolate.$isolateProperties.JSInt();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT11 = Isolate.makeConstantList([32]);
$.CONSTANT0 = new Isolate.$isolateProperties.JSString();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT16 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT2 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT18 = Isolate.makeConstantList([]);
$.CONSTANT8 = Isolate.makeConstantList([13, 10]);
$.CONSTANT14 = Isolate.makeConstantList([72, 84, 84, 80, 47, 49, 46]);
$.CONSTANT4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT19 = Isolate.makeConstantList([44, 32]);
$.CONSTANT12 = Isolate.makeConstantList([72, 84, 84, 80]);
$.CONSTANT17 = new Isolate.$isolateProperties.Object();
$.CONSTANT7 = Isolate.makeConstantList([48, 13, 10, 13, 10]);
$.CONSTANT15 = Isolate.makeConstantList([40, 41, 60, 62, 64, 44, 59, 58, 92, 34, 47, 91, 93, 63, 61, 123, 125, 32, 9, 13, 10]);
$.CONSTANT13 = Isolate.makeConstantList([40, 41, 60, 62, 64, 44, 59, 58, 92, 34, 47, 91, 93, 63, 61, 123, 125, 32, 9]);
$.CONSTANT10 = Isolate.makeConstantList([72, 84, 84, 80, 47, 49, 46, 48]);
$.CONSTANT9 = Isolate.makeConstantList([72, 84, 84, 80, 47, 49, 46, 49]);
$.CONSTANT5 = Isolate.makeConstantList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]);
$.CONSTANT20 = Isolate.makeConstantList([58, 32]);
$.CONSTANT1 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT6 = Isolate.makeConstantList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
$._HttpConnectionBase_REQUEST_DONE = 4;
$._HttpConnectionBase_RESPONSE_DONE = 8;
$._HttpConnectionBase_ALL_DONE = 12;
$._HttpConnectionBase_READ_CLOSED = 16;
$._HttpConnectionBase_WRITE_CLOSED = 32;
$._HttpConnectionBase_FULLY_CLOSED = 48;
$.HttpHeaders_TRANSFER_ENCODING = "Transfer-Encoding";
$._HttpConnectionBase__nextHashCode = 0;
$._Const_HTTP = Isolate.$isolateProperties.CONSTANT12;
$._Const_HTTP1DOT = Isolate.$isolateProperties.CONSTANT14;
$._Const_HTTP10 = Isolate.$isolateProperties.CONSTANT10;
$._DART_SESSION_ID = "DARTSESSID";
$._Const_HTTP11 = Isolate.$isolateProperties.CONSTANT9;
$._Const_END_CHUNKED = Isolate.$isolateProperties.CONSTANT7;
$._Const_SEPARATORS = Isolate.$isolateProperties.CONSTANT13;
$._Const_SEPARATORS_AND_CR_LF = Isolate.$isolateProperties.CONSTANT15;
$._CharCode_HT = 9;
$._CharCode_LF = 10;
$._CharCode_CR = 13;
$._CharCode_SP = 32;
$._CharCode_COMMA = 44;
$._CharCode_SLASH = 47;
$._CharCode_ZERO = 48;
$._CharCode_ONE = 49;
$._CharCode_COLON = 58;
$._CharCode_SEMI_COLON = 59;
$._getTypeNameOf = null;
$.HttpClient_DEFAULT_HTTP_PORT = 80;
$.HttpStatus_CONTINUE = 100;
$.HttpStatus_SWITCHING_PROTOCOLS = 101;
$.HttpStatus_OK = 200;
$.HttpStatus_CREATED = 201;
$.HttpStatus_ACCEPTED = 202;
$.HttpStatus_NON_AUTHORITATIVE_INFORMATION = 203;
$.HttpStatus_NO_CONTENT = 204;
$.HttpStatus_RESET_CONTENT = 205;
$.HttpStatus_PARTIAL_CONTENT = 206;
$.HttpStatus_MULTIPLE_CHOICES = 300;
$.HttpStatus_MOVED_PERMANENTLY = 301;
$.HttpStatus_FOUND = 302;
$.HttpStatus_SEE_OTHER = 303;
$.HttpStatus_NOT_MODIFIED = 304;
$.HttpStatus_USE_PROXY = 305;
$.HttpStatus_TEMPORARY_REDIRECT = 307;
$.HttpStatus_BAD_REQUEST = 400;
$.HttpStatus_UNAUTHORIZED = 401;
$.HttpStatus_PAYMENT_REQUIRED = 402;
$.HttpStatus_FORBIDDEN = 403;
$.HttpStatus_NOT_FOUND = 404;
$.HttpStatus_METHOD_NOT_ALLOWED = 405;
$.HttpStatus_NOT_ACCEPTABLE = 406;
$.HttpStatus_PROXY_AUTHENTICATION_REQUIRED = 407;
$.HttpStatus_REQUEST_TIMEOUT = 408;
$.HttpStatus_CONFLICT = 409;
$.HttpStatus_GONE = 410;
$.HttpStatus_LENGTH_REQUIRED = 411;
$.HttpStatus_PRECONDITION_FAILED = 412;
$.HttpStatus_REQUEST_ENTITY_TOO_LARGE = 413;
$.HttpStatus_REQUEST_URI_TOO_LONG = 414;
$.HttpStatus_UNSUPPORTED_MEDIA_TYPE = 415;
$.HttpStatus_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
$.HttpStatus_EXPECTATION_FAILED = 417;
$.HttpStatus_INTERNAL_SERVER_ERROR = 500;
$.Primitives_hashCodeSeed = 0;
$.HttpStatus_NOT_IMPLEMENTED = 501;
$.HttpStatus_BAD_GATEWAY = 502;
$.HttpStatus_SERVICE_UNAVAILABLE = 503;
$.HttpStatus_GATEWAY_TIMEOUT = 504;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.HttpStatus_HTTP_VERSION_NOT_SUPPORTED = 505;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT4;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.UNICODE_REPLACEMENT_CHARACTER_CODEPOINT = 65533;
$._HttpRequestResponseBase_START = 0;
$.UNICODE_VALID_RANGE_MAX = 1114111;
$._HttpRequestResponseBase_DONE = 2;
$.UNICODE_UTF16_RESERVED_LO = 55296;
$.UNICODE_UTF16_RESERVED_HI = 57343;
$._HttpRequestResponseBase_HEADER_SENT = 1;
$._State_START = 0;
$._State_METHOD_OR_RESPONSE_HTTP_VERSION = 1;
$._State_RESPONSE_HTTP_VERSION = 2;
$._State_REQUEST_LINE_METHOD = 3;
$._UTF8_ONE_BYTE_MAX = 127;
$._HttpVersion_UNDETERMINED = 0;
$._UTF8_TWO_BYTE_MAX = 2047;
$._State_REQUEST_LINE_URI = 4;
$._UTF8_THREE_BYTE_MAX = 65535;
$._HttpVersion_HTTP11 = 2;
$._UTF8_LO_SIX_BIT_MASK = 63;
$._State_RESPONSE_LINE_STATUS_CODE = 7;
$._MessageType_UNDETERMINED = 0;
$._UTF8_FIRST_BYTE_OF_TWO_BASE = 192;
$._MessageType_REQUEST = 1;
$._UTF8_FIRST_BYTE_OF_THREE_BASE = 224;
$._MessageType_RESPONSE = 0;
$._UTF8_FIRST_BYTE_OF_FOUR_BASE = 240;
$._UTF8_FIRST_BYTE_OF_FIVE_BASE = 248;
$._State_HEADER_FIELD = 11;
$._State_RESPONSE_LINE_ENDING = 9;
$._UTF8_FIRST_BYTE_OF_SIX_BASE = 252;
$._State_HEADER_VALUE = 13;
$._State_HEADER_VALUE_START = 12;
$._State_HEADER_VALUE_FOLDING_OR_ENDING = 14;
$._State_HEADER_START = 10;
$._State_REQUEST_LINE_HTTP_VERSION = 5;
$._UTF8_FIRST_BYTE_BOUND_EXCL = 254;
$._State_REQUEST_LINE_ENDING = 6;
$._State_CHUNK_SIZE_STARTING_CR = 17;
$._State_HEADER_ENDING = 16;
$._State_HEADER_VALUE_FOLD_OR_END = 15;
$._State_RESPONSE_LINE_REASON_PHRASE = 8;
$._State_CHUNK_SIZE = 19;
$._State_CHUNK_SIZE_STARTING_LF = 18;
$._State_CHUNK_SIZE_EXTENSION = 20;
$._State_CHUNK_SIZE_ENDING = 21;
$._State_CHUNKED_BODY_DONE_CR = 22;
$._ReceivePortImpl__nextFreeId = 1;
$._State_CHUNKED_BODY_DONE_LF = 23;
$._HttpVersion_HTTP10 = 1;
$._State_BODY = 24;
$._State_CLOSED = 25;
$._State_UPGRADED = 26;
$._State_CANCELED = 27;
$._State_FAILURE = 28;
$._State_FIRST_BODY_STATE = 17;
$._State_FIRST_PARSE_STOP_STATE = 25;
$.HttpHeaders_CONNECTION = "Connection";
$.HttpHeaders_CONTENT_LENGTH = "Content-Length";
$._HttpConnectionBase_IDLE = 0;
$._HttpConnectionBase_ACTIVE = 1;
$._HttpConnectionBase_CLOSING = 2;
$.getInterceptor$JSArray = function(receiver) {
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  if (typeof receiver == 'number' && Math.floor(receiver) == receiver) return $.JSInt.prototype;
  if (typeof receiver == 'number') return $.JSDouble.prototype;
  if (receiver == null) return $.JSNull.prototype;
  if (typeof receiver == 'function') return $.JSFunction.prototype;
  if (typeof receiver == 'boolean') return $.JSBool.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 toString$0: function() { return $.toStringForNativeObject(this); },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); }
});

$.$defineNativeClass('DOMWindow', {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
},
 clearInterval$1: function(handle) {
  return this.clearInterval(handle);
}
});

// 1 dynamic classes.
// 1 classes
// 0 !leaf

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=test-server.dart.js.map